// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpusLink.Entity;

#nullable disable

namespace OpusLink.Entity.Migrations
{
    [DbContext(typeof(OpusLinkDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.BlockWordRegEx", b =>
                {
                    b.Property<int>("PatternID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatternID"), 1L, 1);

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PatternID");

                    b.ToTable("BlockWordRegEx", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("CategoryParentID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryParentID");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Web dev"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "BE dev",
                            CategoryParentID = 1
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "FE dev",
                            CategoryParentID = 1
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "BA"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Dạy học trực tuyến"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ChatBox", b =>
                {
                    b.Property<int>("ChatBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatBoxID"), 1L, 1);

                    b.Property<int>("EmployerID")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.HasKey("ChatBoxID");

                    b.HasIndex("EmployerID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("ChatBox", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.FeedbackUser", b =>
                {
                    b.Property<int>("FeedbackUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackUserID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<int>("TargetToUserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackUserID");

                    b.HasIndex("CreateByUserID");

                    b.HasIndex("TargetToUserID");

                    b.ToTable("FeedbackUser", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.FreelancerWithSkill", b =>
                {
                    b.Property<int>("FreelancerWithSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FreelancerWithSkillID"), 1L, 1);

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("FreelancerWithSkillID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("SkillID");

                    b.ToTable("FreelancerWithSkill", (string)null);

                    b.HasData(
                        new
                        {
                            FreelancerWithSkillID = 1,
                            FreelancerID = 4,
                            SkillID = 1
                        },
                        new
                        {
                            FreelancerWithSkillID = 2,
                            FreelancerID = 5,
                            SkillID = 2
                        },
                        new
                        {
                            FreelancerWithSkillID = 3,
                            FreelancerID = 6,
                            SkillID = 3
                        },
                        new
                        {
                            FreelancerWithSkillID = 4,
                            FreelancerID = 7,
                            SkillID = 4
                        },
                        new
                        {
                            FreelancerWithSkillID = 5,
                            FreelancerID = 8,
                            SkillID = 5
                        },
                        new
                        {
                            FreelancerWithSkillID = 6,
                            FreelancerID = 4,
                            SkillID = 6
                        },
                        new
                        {
                            FreelancerWithSkillID = 7,
                            FreelancerID = 7,
                            SkillID = 7
                        },
                        new
                        {
                            FreelancerWithSkillID = 8,
                            FreelancerID = 5,
                            SkillID = 1
                        },
                        new
                        {
                            FreelancerWithSkillID = 9,
                            FreelancerID = 6,
                            SkillID = 2
                        },
                        new
                        {
                            FreelancerWithSkillID = 10,
                            FreelancerID = 7,
                            SkillID = 3
                        },
                        new
                        {
                            FreelancerWithSkillID = 11,
                            FreelancerID = 8,
                            SkillID = 4
                        },
                        new
                        {
                            FreelancerWithSkillID = 12,
                            FreelancerID = 7,
                            SkillID = 5
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.HistoryPayment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("HistoryPayment", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"), 1L, 1);

                    b.Property<decimal?>("BudgetFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployerID")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<string>("JobContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("JobID");

                    b.HasIndex("EmployerID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("LocationID");

                    b.ToTable("Job", (string)null);

                    b.HasData(
                        new
                        {
                            JobID = 1,
                            BudgetFrom = 300000m,
                            BudgetTo = 500000m,
                            DateCreated = new DateTime(2023, 1, 29, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 1,
                            FreelancerID = 5,
                            JobContent = "Minh can 1 nguoi code web",
                            JobTitle = "Tim DEV",
                            LocationID = 1,
                            Status = "Hired"
                        },
                        new
                        {
                            JobID = 2,
                            BudgetFrom = 200000m,
                            BudgetTo = 800000m,
                            DateCreated = new DateTime(2023, 1, 29, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 2,
                            JobContent = "Can 1 nguoi hieu ve nghiep vu ngan hang để tạo ra tài liệu requirement cho trang web",
                            JobTitle = "Tim BA làm requirement",
                            LocationID = 1,
                            Status = "Approved"
                        },
                        new
                        {
                            JobID = 3,
                            BudgetFrom = 400000m,
                            BudgetTo = 1000000m,
                            DateCreated = new DateTime(2023, 1, 29, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 2,
                            FreelancerID = 8,
                            JobContent = "Can nguoi giup minh thiet ke DataBase cho trang web giao duc",
                            JobTitle = "Thiet ke Database",
                            LocationID = 2,
                            Status = "Hired"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.JobInCategory", b =>
                {
                    b.Property<int>("JobInCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobInCategoryID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.HasKey("JobInCategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("JobID");

                    b.ToTable("JobInCategory", (string)null);

                    b.HasData(
                        new
                        {
                            JobInCategoryID = 1,
                            CategoryID = 1,
                            JobID = 1
                        },
                        new
                        {
                            JobInCategoryID = 2,
                            CategoryID = 2,
                            JobID = 1
                        },
                        new
                        {
                            JobInCategoryID = 3,
                            CategoryID = 3,
                            JobID = 1
                        },
                        new
                        {
                            JobInCategoryID = 4,
                            CategoryID = 4,
                            JobID = 2
                        },
                        new
                        {
                            JobInCategoryID = 5,
                            CategoryID = 1,
                            JobID = 3
                        },
                        new
                        {
                            JobInCategoryID = 6,
                            CategoryID = 5,
                            JobID = 3
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("LocationID");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            LocationName = "HaNoi"
                        },
                        new
                        {
                            LocationID = 2,
                            LocationName = "DaNang"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"), 1L, 1);

                    b.Property<int>("ChatBoxID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FromEmployer")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("MessageID");

                    b.HasIndex("ChatBoxID");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Milestone", b =>
                {
                    b.Property<int>("MilestoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneID"), 1L, 1);

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePathFreelancerUpload")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("MilestoneContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneID");

                    b.HasIndex("JobID");

                    b.ToTable("Milestone", (string)null);

                    b.HasData(
                        new
                        {
                            MilestoneID = 1,
                            AmountToPay = 100000m,
                            Deadline = new DateTime(2024, 2, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FilePathFreelancerUpload = "Job1Moc1.pdf",
                            JobID = 1,
                            MilestoneContent = "Moc 1:..."
                        },
                        new
                        {
                            MilestoneID = 2,
                            AmountToPay = 300000m,
                            Deadline = new DateTime(2024, 2, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FilePathFreelancerUpload = "Job1Moc2.pdf",
                            JobID = 1,
                            MilestoneContent = "Moc 2:..."
                        },
                        new
                        {
                            MilestoneID = 3,
                            AmountToPay = 100000m,
                            Deadline = new DateTime(2024, 2, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FilePathFreelancerUpload = "Job3Moc1.pdf",
                            JobID = 3,
                            MilestoneContent = "Moc 1:..."
                        },
                        new
                        {
                            MilestoneID = 4,
                            AmountToPay = 200000m,
                            Deadline = new DateTime(2024, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FilePathFreelancerUpload = "Job3Moc2.pdf",
                            JobID = 3,
                            MilestoneContent = "Moc 2:..."
                        },
                        new
                        {
                            MilestoneID = 5,
                            AmountToPay = 300000m,
                            Deadline = new DateTime(2024, 2, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FilePathFreelancerUpload = "Job3Moc3.pdf",
                            JobID = 3,
                            MilestoneContent = "Moc 3:..."
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"), 1L, 1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Offer", b =>
                {
                    b.Property<int>("OfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferID"), 1L, 1);

                    b.Property<DateTime>("DateOffer")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimatedPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ExpectedDays")
                        .HasColumnType("smallint");

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProposedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SelfIntroduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("JobID");

                    b.ToTable("Offer", (string)null);

                    b.HasData(
                        new
                        {
                            OfferID = 1,
                            DateOffer = new DateTime(2023, 1, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedPlan = "Nếu bạn quan tâm đến chào giá này, hãy reply cho mình biết. Mình sẽ setup một buổi meeting trao đổi chi tiết về doanh nghiệp của bạn và gửi sitemap, kế hoạch chi tiết trong vòng không quá 2 giờ sau đó.",
                            ExpectedDays = (short)7,
                            FreelancerID = 5,
                            JobID = 1,
                            ProposedCost = 280000m,
                            SelfIntroduction = "Đã có kinh nghiệm 3 năm làm web, mobile app đa lĩnh vực trong và ngoài nước"
                        },
                        new
                        {
                            OfferID = 2,
                            DateOffer = new DateTime(2023, 1, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedPlan = "Kế hoạch thực hiện công việc:\r\n-Thu thập thông tin khách hàng cũng nhu nhu cầu thiết kế.\r\n-Phân tích, báo giá và tiến hành thương lượng chốt sản phẩm.\r\n-Hoàn thành sản phẩm trong tiến độ đã thương lượng, test sản phẩm và bàn giao đến khách hàng.\r\n-Tiến hành sửa chữa, fix lỗi trong quá trình dùng thử.\r\n-Nhận thanh toán và áp dụng chính sách hậu mãi cho khách hàng",
                            ExpectedDays = (short)3,
                            FreelancerID = 8,
                            JobID = 1,
                            ProposedCost = 500000m,
                            SelfIntroduction = "Tôi là một lập trình viên có nhiều năm kinh nghiệm phát triển các loại website, đặc biệt là các trang web bán hàng, giáo dục, bất động sản và y tế. Trong suốt sự nghiệp của mình, tôi tạo ra những trang web chất lượng cao, mang tính sáng tạo và tối ưu hoá hiệu suất. Tôi tự hào về việc đã đóng góp vào việc xây dựng nền tảng kỹ thuật vững chắc để hỗ trợ các doanh nghiệp bán hàng và các tổ chức giáo dục trong việc tăng cường hiệu quả kinh doanh và phục vụ học tập.\r\n\r\nTrong quá trình làm việc, tôi đã tiếp xúc và thành thạo các công nghệ đa dạng như HTML, CSS, JavaScript, PHP, Python và nhiều framework phổ biến như Vuejs, Nuxtjs, Reactjs, Nextjs, Laravel, Django, Express, Nestjs. Sự am hiểu sâu sắc về các công nghệ này giúp tôi tạo ra những trải nghiệm người dùng tuyệt vời và tích hợp những tính năng đa dạng, như thanh toán an toàn, quản lý tài khoản, đánh giá sản phẩm và nhiều tính năng tùy chỉnh khác."
                        },
                        new
                        {
                            OfferID = 3,
                            DateOffer = new DateTime(2023, 1, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedPlan = "Meeting trao doi chi tiet ve Requirement, sau do lam Database",
                            ExpectedDays = (short)7,
                            FreelancerID = 4,
                            JobID = 3,
                            ProposedCost = 1000000m,
                            SelfIntroduction = "Toi co 2 nam kinh nghiem lam DataBase"
                        },
                        new
                        {
                            OfferID = 4,
                            DateOffer = new DateTime(2023, 2, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedPlan = "Làm ngay sau khi có đầy đủ nội dung và yêu cầu. Bảo hành và bảo trì.",
                            ExpectedDays = (short)7,
                            FreelancerID = 5,
                            JobID = 2,
                            ProposedCost = 700000m,
                            SelfIntroduction = ""
                        },
                        new
                        {
                            OfferID = 5,
                            DateOffer = new DateTime(2023, 2, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedPlan = "Thu thập thông tin về requirement, phân tích, báo giá & thương lượng, hoàn thành theo tiến độ đã vạch ra, test, hỗ trợ 1 tháng sau khi bàn giao",
                            ExpectedDays = (short)4,
                            FreelancerID = 8,
                            JobID = 3,
                            ProposedCost = 800000m,
                            SelfIntroduction = "Toi co 3 nam kinh nghiem lam DataBase cho cong ty cong nghe noi tieng"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ReportJob", b =>
                {
                    b.Property<int>("ReportJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportJobID"), 1L, 1);

                    b.Property<int>("CreateByFreelancer")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportJobContent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TargetToJob")
                        .HasColumnType("int");

                    b.HasKey("ReportJobID");

                    b.HasIndex("TargetToJob");

                    b.ToTable("ReportJob", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ReportUser", b =>
                {
                    b.Property<int>("ReportUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportUserID"), 1L, 1);

                    b.Property<int>("CreateByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportUserContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetToUserID")
                        .HasColumnType("int");

                    b.HasKey("ReportUserID");

                    b.HasIndex("CreateByUserID");

                    b.HasIndex("TargetToUserID");

                    b.ToTable("ReportUser", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.SaveJob", b =>
                {
                    b.Property<int>("SaveJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaveJobID"), 1L, 1);

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.HasKey("SaveJobID");

                    b.HasIndex("JobID");

                    b.ToTable("SaveJob", (string)null);
                });

            modelBuilder.Entity("OpusLink.Entity.Models.SearchJobForm", b =>
                {
                    b.Property<int>("FormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("FormID");

                    b.ToTable("SearchJobForm", (string)null);

                    b.HasData(
                        new
                        {
                            FormID = 1,
                            CategoryID = 1,
                            LocationID = 1
                        },
                        new
                        {
                            FormID = 2,
                            CategoryID = 2,
                            LocationID = 2
                        },
                        new
                        {
                            FormID = 3,
                            CategoryID = 5,
                            LocationID = 2
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillID"), 1L, 1);

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("SkillParentID")
                        .HasColumnType("int");

                    b.HasKey("SkillID");

                    b.HasIndex("SkillParentID");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            SkillID = 1,
                            SkillName = "Web development"
                        },
                        new
                        {
                            SkillID = 2,
                            SkillName = "code React",
                            SkillParentID = 1
                        },
                        new
                        {
                            SkillID = 3,
                            SkillName = "code .net razor page",
                            SkillParentID = 1
                        },
                        new
                        {
                            SkillID = 4,
                            SkillName = "design 2D"
                        },
                        new
                        {
                            SkillID = 5,
                            SkillName = "communication"
                        },
                        new
                        {
                            SkillID = 6,
                            SkillName = "English"
                        },
                        new
                        {
                            SkillID = 7,
                            SkillName = "Teaching"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("AmountMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountInfor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CVFilePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullNameOnIDCard")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVeryfiedIdentity")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("StarMedium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "407f1539-ec29-453a-85ab-d83fbc262438",
                            Email = "nva123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nguyen Van A"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 2,
                            ConcurrencyStamp = "2b9515d0-f428-4486-ba86-d3f875d87b40",
                            Email = "nvb123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = true,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nguyen Van B"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ece3227-5e59-4dc4-9752-772561de2127",
                            Email = "nvc123@gmail.com",
                            EmailConfirmed = false,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nguyen Van C"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 3,
                            ConcurrencyStamp = "6113aea3-2102-407c-9c5f-f40a720fdb4b",
                            Email = "tvd123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tran Van D"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 4,
                            ConcurrencyStamp = "34c2fa0b-2d94-4a29-be12-34a0417b5848",
                            Email = "tte123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tran Thi E"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 5,
                            ConcurrencyStamp = "de7a66e1-a4dd-4e2c-873a-97c928e4bf92",
                            Email = "tvf123@gmail.com",
                            EmailConfirmed = false,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tran Van F"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 6,
                            ConcurrencyStamp = "288a6c76-a14f-43f6-aaf3-7b78b75c2e90",
                            Email = "ttg123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = true,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tran Thi G"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 7,
                            ConcurrencyStamp = "0c38746b-38cc-46e3-a4ed-1c8e464c61d5",
                            Email = "tth123@gmail.com",
                            EmailConfirmed = true,
                            IsVeryfiedIdentity = false,
                            LockoutEnabled = false,
                            PasswordHash = "test",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tran Thi H"
                        });
                });

            modelBuilder.Entity("OpusLink.Entity.Models.WithdrawRequest", b =>
                {
                    b.Property<int>("WithdrawRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WithdrawRequestID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("WithdrawRequestID");

                    b.HasIndex("UserID");

                    b.ToTable("WithdrawRequest", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Category", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.Category", "CategoryParent")
                        .WithMany()
                        .HasForeignKey("CategoryParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CategoryParent");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ChatBox", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Employer")
                        .WithMany("ChatBoxsAsAnEmployer")
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("ChatBoxsAsAFreelancer")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.FeedbackUser", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "CreateByUser")
                        .WithMany("FeedbackUsersAsACreater")
                        .HasForeignKey("CreateByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.User", "TargetToUser")
                        .WithMany("FeedbackUsersAsATargeter")
                        .HasForeignKey("TargetToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateByUser");

                    b.Navigation("TargetToUser");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.FreelancerWithSkill", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("FreelancerWithSkills")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.Skill", "Skill")
                        .WithMany("FreelancerWithSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.HistoryPayment", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "User")
                        .WithMany("HistoryPayments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Job", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Employer")
                        .WithMany("JobsAsAnEmployer")
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("JobsAsAFreelancer")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpusLink.Entity.Models.Location", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employer");

                    b.Navigation("Freelancer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.JobInCategory", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.Category", "Category")
                        .WithMany("JobInCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.Job", "Job")
                        .WithMany("JobInCategories")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Message", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.ChatBox", "ChatBox")
                        .WithMany("Messages")
                        .HasForeignKey("ChatBoxID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatBox");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Milestone", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.Job", "Job")
                        .WithMany("Milestones")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Notification", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Offer", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("OffersAsAFreelancer")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.Job", "Job")
                        .WithMany("Offers")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ReportJob", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("ReportJobs")
                        .HasForeignKey("TargetToJob")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.Job", "Job")
                        .WithMany("ReportJobs")
                        .HasForeignKey("TargetToJob")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ReportUser", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "CreateByUser")
                        .WithMany("ReportUsersAsACreater")
                        .HasForeignKey("CreateByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.User", "TargetToUser")
                        .WithMany("ReportUsersAsATargeter")
                        .HasForeignKey("TargetToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateByUser");

                    b.Navigation("TargetToUser");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.SaveJob", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "Freelancer")
                        .WithMany("SaveJobs")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpusLink.Entity.Models.Job", "Job")
                        .WithMany("SaveJobs")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Skill", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.Skill", "SkillParent")
                        .WithMany()
                        .HasForeignKey("SkillParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SkillParent");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.WithdrawRequest", b =>
                {
                    b.HasOne("OpusLink.Entity.Models.User", "User")
                        .WithMany("WithdrawRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Category", b =>
                {
                    b.Navigation("JobInCategories");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.ChatBox", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Job", b =>
                {
                    b.Navigation("JobInCategories");

                    b.Navigation("Milestones");

                    b.Navigation("Offers");

                    b.Navigation("ReportJobs");

                    b.Navigation("SaveJobs");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Location", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.Skill", b =>
                {
                    b.Navigation("FreelancerWithSkills");
                });

            modelBuilder.Entity("OpusLink.Entity.Models.User", b =>
                {
                    b.Navigation("ChatBoxsAsAFreelancer");

                    b.Navigation("ChatBoxsAsAnEmployer");

                    b.Navigation("FeedbackUsersAsACreater");

                    b.Navigation("FeedbackUsersAsATargeter");

                    b.Navigation("FreelancerWithSkills");

                    b.Navigation("HistoryPayments");

                    b.Navigation("JobsAsAFreelancer");

                    b.Navigation("JobsAsAnEmployer");

                    b.Navigation("Notifications");

                    b.Navigation("OffersAsAFreelancer");

                    b.Navigation("ReportJobs");

                    b.Navigation("ReportUsersAsACreater");

                    b.Navigation("ReportUsersAsATargeter");

                    b.Navigation("SaveJobs");

                    b.Navigation("WithdrawRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
