@page
@using OpusLink.Shared.Color;
@using OpusLink.Shared.Enums;
@model OpusLink.User.Hosted.Pages.MS.EmployerViewAllMSModel
@{
    int soThuTu = 1;
}
<style>
    .circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 2px solid black;
        background-color: inherit;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 30px;
    }

    .status {
        font-weight: bold;
        color: white;
        display: inline-block;
        min-width: 200px;
        min-height: 40px;
        padding: 8px 50px 8px 50px;
        text-align: center;
    }

    #countdown {
        font-size: 24px;
        font-weight: bold;
    }

    .hrMilestone {
        border: none;
        border-bottom: 2px solid #373737;
        margin-top: 10px;
        margin-bottom: 0px;
        margin-left: -5px;
        margin-right: -5px;
    }
    /*modal*/
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        min-width: 50%;
        max-width: 50%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
    }


    /* Add Animation */
    @@-webkit-keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    @@keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    /* The Close Button */
    .close {
        color: white;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .modal-header {
        padding: 2px 16px;
        background-color: #2DB964;
        color: white;
    }

    .modal-body {
        padding: 2px 16px;
    }

    .buttonEdit:hover {
        background-color: #1B6ABE;
        color: white !important;
    }

    .buttonDelete:hover {
        background-color: #CD2000;
        color: white !important;
    }

    .feedbackbtn{
        /* Thiết lập các thuộc tính CSS tùy theo ý của bạn */
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff; /* Màu nền */
        color: #fff; /* Màu chữ */
        text-decoration: none;
        border-radius: 5px;
    }
    .feedbackbtn:hover{
            background-color: #0056b3; /* Màu nền khi hover */
            color: #fff; /* Màu chữ khi hover */
    }
</style>
<div style="margin: 20px 50px 20px 50px">
    <div id="requestModal" class="modal">
        <!-- Modal request -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Yêu cầu freelancer chấp nhận kế hoạch</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" onsubmit="return validateDateTimeRequest('RequestDeadline')" style="width:100%">
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <span id="RequestErrorMessage" style="color:red"></span>
                        <tr><td>Chọn một thời hạn để Freelancer chấp nhận kế hoạch:    </td></tr>
                        <tr><td><input id="requestModalDTL" type="datetime-local" name="RequestDeadline" required /></td></tr>
                        <tr><td style="text-align:center"><button type="submit" asp-page-handler="ForRequest" style="width:30%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964">Gửi</button></td></tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="addModal" class="modal">
        <!-- Modal add -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Thêm một milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" onsubmit="return validateDateTimeAdd('AddDeadline','AddAmountToPay')" style="width:100%">
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr><td>Nội dung:    </td><td><input type="text" name="AddMilestoneContent" required /></td></tr>
                        <tr><td>Chọn thời hạn:    </td><td><input id="addModalDTL" type="datetime-local" name="AddDeadline" required /></td></tr>
                        <tr><td>Số tiền:    </td><td><input type="text" name="AddAmountToPay" pattern="[0-9₫ ,.]+" title="Xin hãy nhập số" required /></td></tr>
                        <span id="AddErrorMessage" style="color:red"></span>
                        @*<tr>
                        <td>Status:    </td>
                        <td>
                        <select name="AddStatus">
                        <option value="0">No Parent</option>
                        @foreach (var item in Model.AllCategories)
                        {
                        <option value="@item.CategoryID">@item.CategoryID<span>-</span>@item.CategoryName</option>
                        }
                        </select>
                        </td>
                        </tr>*@
                        <tr><td></td><td style="text-align:center"><button type="submit" asp-page-handler="ForAdd" style="width:30%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964">Thêm</button></td></tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="updateModal" class="modal">
        <!-- Modal update -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Sửa nội dung milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" onsubmit="return validateDateTimeUpdate('UpdateDeadline','UpdateAmountToPay')" style="width:100%">
                    <input type="text" name="UpdateMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr><td>Nội dung milestone:    </td><td><input type="text" name="UpdateMilestoneContent" required /></td></tr>
                        <tr><td>Chọn thời hạn:    </td><td><input id="updateModalDTL" type="datetime-local" name="UpdateDeadline" required /></td></tr>
                        <tr><td>Số tiền:    </td><td><input type="text" name="UpdateAmountToPay" pattern="[0-9₫ ,.]+" title="Hãy nhập số" required /></td></tr>
                        <span id="UpdateErrorMessage" style="color:red"></span>
                        @*<tr>
                        <td>Status:    </td>
                        <td>
                        <select name="AddStatus">
                        <option value="0">No Parent</option>
                        @foreach (var item in Model.AllCategories)
                        {
                        <option value="@item.CategoryID">@item.CategoryID<span>-</span>@item.CategoryName</option>
                        }
                        </select>
                        </td>
                        </tr>*@
                        <tr><td></td><td style="text-align:center"><button type="submit" asp-page-handler="ForUpdate" style="width:30%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964">Cập nhật</button></td></tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="deleteModal" class="modal">
        <!-- Modal delete -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Xóa milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="DeleteMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2">
                                Bạn có thực sự muốn xóa milestone này ?
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Nội dung milestone:
                            </td>
                            <td>
                                <input type="text" name="DeleteMilestoneContent" readonly />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Thời hạn:
                            </td>
                            <td>
                                <input type="datetime-local" name="DeleteDeadline" readonly />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Số tiền :
                            </td>
                            <td>
                                <input type="text" name="DeleteAmountToPay" readonly />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Trạng thái:
                            </td>
                            <td name="DeleteStatus">
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForDelete" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px">Xóa</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC">Không xóa</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="putMoneyModal" class="modal">
        <!-- Modal PutMoney -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Đặt tiền vào milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="PutMoneyMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2" id="putMoneyInformation">
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" id="putMoneyQuestion">
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForPutMoney" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px;white-space: nowrap;">Đặt tiền</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC;white-space: nowrap;">Không đặt tiền</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="getBackMoneyModal" class="modal">
        <!-- Modal getBackMoneyModal -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Bỏ đặt tiền</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="GetBackMoneyMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2" id="getBackMoneyQuestion">
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForGetBackMoney" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px">Bỏ đặt tiền</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC">Hủy</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="reviewModal" class="modal">
        <!-- Modal Review -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Review sản phẩm của freelancer</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="ReviewMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2">
                                Bạn có đồng ý rằng Freelancer đã hoàn thành milestone này không ?
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForReviewCompleteMilestone" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px;white-space: nowrap;">Đã hoàn thành</button></td>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForReviewRejectMilestone" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC;white-space: nowrap;">Chưa hoàn thành</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="resolveModal1" class="modal">
        <!-- Modal Resolve -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Giải quyết vấn đề</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="ResolveMilestone1ID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="text-align:left;width:100%">
                        <tr>
                            <td>
                                Milestone thì đã quá hạn nhưng Freelancer chưa làm xong. Bạn giải quyết thế nào?
                            </td>
                        </tr>
                        <tr>
                            <td><button type="button" id="OpenExtendDeadline1" style="background-color:#2DB964;color:white;border:2px solid #2DB964">Gia hạn thêm để freelancer tiếp tục làm</button></td>

                        </tr>
                        <tr>
                            <td><button type="button" id="OpenConfirmFailMilestone1" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Freelancer đã làm milestone thất bại</button></td>

                        </tr>
                        <tr>
                            <td><button type="button" id="OpenConfirmFailJob1" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Freelancer đã làm job thất bại</button></td>

                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="resolveModal2" class="modal">
        <!-- Modal Resolve -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Giải quyết vấn đề</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="ResolveMilestone2ID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table>
                        <tr>
                            <td>
                                Freelancer đã hoàn thành milestone trước thời hạn. Nhưng bạn chưa xem lại milestone trước thời hạn.
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Bạn giải quyết vấn đề này như thế nào?
                            </td>
                        </tr>
                        <tr>
                            <td><button type="button" id="OpenAcceptMilestone2" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Chấp nhận công việc của freelancer. Milestone này đã hoàn thành.</button></td>

                        </tr>
                        <tr>
                            <td><button type="button" id="OpenExtendDeadline2" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Gia hạn thời hạn sau đó freelancer làm lại milestone này</button></td>

                        </tr>
                        <tr>
                            <td><button type="button" id="OpenConfirmFailMilestone2" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Freelancer thất bại ở milestone này</button></td>

                        </tr>
                        <tr>
                            <td><button type="button" id="OpenConfirmFailJob2" style="background-color:#2DB964;color:white;border:2px solid #2DB964;text-align:left">Freelancer thất bại trong công việc này</button></td>

                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="extendDeadline" class="modal">
        <!-- Modal Extend Deadline -->
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Gia hạn Milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" onsubmit="return validateDateTimeExtend('ExtendDeadlineTime')" style="width:100%">
                    <input type="text" name="ExtendDeadlineMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table>
                        <tr>
                            <td>
                                Hãy chọn một deadline mới cho Milestone này.
                            </td>
                        </tr>
                        <span id="ExtendErrorMessage" style="color:red"></span>
                        <tr><td><input id="extendDeadlineDTL" type="datetime-local" name="ExtendDeadlineTime" required /></td></tr>
                        <tr><td style="text-align:center"><button type="submit" asp-page-handler="ForExtend" style="width:30%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964">Lưu</button></td></tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="failMsModal" class="modal">
        <!-- Modal failMsModal -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Milestone thất bại</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="FailMsMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2">
                                Milestone này thất bại và bạn sẽ nhận lại 100% tiền của milestone này ?
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForFailMs" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px">Đồng ý</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC">Hủy</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="failJobModal" class="modal">
        <!-- Modal failMsModal -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Fail job</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="FailJobMilestoneID" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2">
                                Job này thất bại và bạn sẽ nhận lại 20% của những milestone đã hoàn thành cộng với tất cả tiền của những milestone đang làm ?
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForFailJob" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px">Đồng ý</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC">Hủy</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div id="acceptMilestoneModal" class="modal">
        <!-- Modal failMsModal -->
        <div class="modal-content" style="width:fit-content">
            <div class="modal-header">
                <h2 style="font-size:24px">Chấp nhận Milestone</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <form method="post" style="width:100%">
                    <input type="text" name="AcceptMs2" hidden />
                    <input type="text" name="JobID" hidden value="@Model.JobID" />
                    <table style="width:100%">
                        <tr>
                            <td colspan="2">
                                Chấp nhận Freelancer đã hoàn thành milestone này?
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align:center"><button type="submit" asp-page-handler="ForAcceptMilestone2" style="background-color:#2DB964;color:white;border:2px solid #2DB964;width:120px">Chấp nhận</button></td>
                            <td style="text-align:center"><button type="button" onclick="hideModal()" style="background-color:#CCCCCC; color:white;width:120px;border:2px solid #CCCCCC">Hủy</button></td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <div>
        <div>
            <h5>Tiêu đề: @Model.job.JobTitle</h5>
            <h5>Mô tả công việc: @Model.job.JobContent</h5>
        </div>
    </div>
    <div class="row" style="margin-bottom:15px">
        <div class="col-md-10"></div>
        <div class="col-md-2">
            @if (Model.job.Status == (int)JobStatusEnum.Hiring || Model.job.Status == (int)JobStatusEnum.Hired || Model.job.Status == (int)JobStatusEnum.NotApprove)
            {
                if (Model.job.EmployerDoneEditMilestone == false)
                {
                    <button type="button" id="openAddMilestone" style="width:80%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964;border-radius:3px">Thêm một Milestone</button>
                }
                else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == false && Model.job.DeadlineFreelancerConfirm < DateTime.Now)
                {
                    <button type="button" id="openAddMilestone" style="width:80%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964;border-radius:3px">Thêm một Milestone</button>
                }
                else
                {
                    <button type="button" id="openAddMilestone" style="width:80%;background-color:#2DB964;border:none;color:white;border:2px solid #2DB964;border-radius:3px" hidden>Thêm một Milestone</button>

                }
            }


        </div>
    </div>
    <div style="margin: 20px 40px 20px 40px">
        <div class="row" style="margin:10px 10px 10px 10px">
            <div class="col-md-2" style="display: flex;align-items: center;">
                Số thứ tự
            </div>
            <div class="col-md-4" style="display: flex;flex-direction: column;justify-content: center;">
                Nội dung
            </div>
            <div class="col-md-2" style="display: flex;justify-content: center;align-items: center;">
                Trạng thái
            </div>
            <div class="col-md-4" style="display: flex;flex-direction: column;justify-content: center;align-items: center;">
                Thao tác
            </div>

        </div>
        <hr class="hrMilestone">
        @foreach (var item in Model.milestones)
        {
            <div class="row" style="margin:10px 10px 10px 10px">
                <div class="col-md-1" style="display: flex;align-items: center;">
                    <div class="circle">@soThuTu</div>
                </div>
                <div class="col-md-5" style="display: flex;flex-direction: column;justify-content: center;">
                    <h4 style="font-weight:bold;display:block">@item.MilestoneContent</h4>
                    <p>Thời hạn @item.Deadline.ToString("dd/MM/yyyy HH:mm")</p>
                    <p>@((item.AmountToPay).ToString("#,##")) ₫</p>
                    @if (Model.job.IsFreelancerConfirm == false && item.Deadline < DateTime.Now)
                    {
                        <p style="color:red">Không thể đặt thời hạn của milestone ở quá khứ.</p>
                    }
                </div>
                <div style="display:none">
                    <span id="MilestoneContent_@item.MilestoneID">@item.MilestoneContent</span>
                    <span id="Deadline_@item.MilestoneID">@item.Deadline.ToString("yyyy-MM-ddTHH:mm")</span>
                    <span id="AmountToPay_@item.MilestoneID">@((item.AmountToPay).ToString("#,##")) ₫</span>
                    <div id="ShowStatus_@item.MilestoneID">
                        @if (Model.job.IsFreelancerConfirm == false)
                        {
                            if (item.Status == (int)MilestoneStatusEnum.EmployerCreated)
                            {
                                <p class="status" style="color:@MSColor.New;white-space: nowrap;">Mới tạo</p>
                            }
                            else if (item.Status == (int)MilestoneStatusEnum.MoneyPutted)
                            {
                                <p class="status" style="color:@MSColor.MoneyPutted;white-space: nowrap;">Đã đặt tiền</p>
                            }



                        }
                        else
                        {
                            if (item.IsFreelancerDone && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline > DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.WaitingForReview;white-space: nowrap;">Đang chờ review</p>
                            }
                            if (item.Status == (int)MilestoneStatusEnum.EmployerCreated && item.Deadline < DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.Late;white-space: nowrap;">Muộn</p>
                            }
                            if (item.Status == (int)MilestoneStatusEnum.EmployerCreated && item.Deadline > DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.New;white-space: nowrap;">Mới tạo</p>
                            }
                            if (item.IsFreelancerDone && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline < DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.EmployerLate;white-space: nowrap;">Employer trễ hạn</p>
                            }
                            if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline < DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.FreelancerLate;white-space: nowrap;">Freelancer trễ hạn</p>
                            }
                            if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline > DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.MoneyPutted;white-space: nowrap;">Đã đặt tiền</p>
                            }
                            if (item.IsFreelancerDone == true && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline > DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.WaitingForReviewAgain;white-space: nowrap;">Chờ review lại</p>
                            }
                            if (item.IsFreelancerDone == true && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline < DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.EmployerLate;white-space: nowrap;">Employer trễ hạn</p>
                            }
                            if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline < DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.FreelancerLate;white-space: nowrap;">Freelancer trễ hạn</p>
                            }
                            if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline > DateTime.Now)
                            {
                                <p class="status" style="color:@MSColor.FreelancerReDo;white-space: nowrap;">Freelancer đang làm lại</p>
                            }

                            if (item.Status == (int)MilestoneStatusEnum.Completed)
                            {
                                <p class="status" style="color:@MSColor.Completed;white-space: nowrap;">Hoàn thành</p>
                            }
                            if (item.Status == (int)MilestoneStatusEnum.Failed)
                            {
                                <p class="status" style="color:@MSColor.Failed;white-space: nowrap;">Thất bại</p>
                            }
                        }

                    </div>
                </div>
                <div class="col-md-2" style="display: flex;justify-content: center;align-items: center;">

                    @if (Model.job.IsFreelancerConfirm == false)
                    {
                        if (item.Status == (int)MilestoneStatusEnum.EmployerCreated)
                        {
                            <p class="status" style="color:@MSColor.New;white-space: nowrap;">Mới tạo</p>
                        }
                        else if (item.Status == (int)MilestoneStatusEnum.MoneyPutted)
                        {
                            <p class="status" style="color:@MSColor.MoneyPutted;white-space: nowrap;">Đã đặt tiền</p>
                        }



                    }
                    else
                    {
                        if (item.IsFreelancerDone && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline > DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.WaitingForReview;white-space: nowrap;">Đang chờ review</p>
                        }
                        if (item.Status == (int)MilestoneStatusEnum.EmployerCreated && item.Deadline < DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.Late;white-space: nowrap;">Muộn</p>
                        }
                        if (item.Status == (int)MilestoneStatusEnum.EmployerCreated && item.Deadline > DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.New;white-space: nowrap;">Mới tạo</p>
                        }
                        if (item.IsFreelancerDone && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline < DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.EmployerLate;white-space: nowrap;">Employer trễ hạn</p>
                        }
                        if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline < DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.FreelancerLate;white-space: nowrap;">Freelancer trễ hạn</p>
                        }
                        if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.MoneyPutted && item.Deadline > DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.MoneyPutted;white-space: nowrap;">Đã đặt tiền</p>
                        }
                        if (item.IsFreelancerDone == true && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline > DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.WaitingForReviewAgain;white-space: nowrap;">Chờ review lại</p>
                        }
                        if (item.IsFreelancerDone == true && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline < DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.EmployerLate;white-space: nowrap;">Employer trễ hạn</p>
                        }
                        if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline < DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.FreelancerLate;white-space: nowrap;">Freelancer trễ hạn</p>
                        }
                        if (item.IsFreelancerDone == false && item.Status == (int)MilestoneStatusEnum.EmployerRejected && item.Deadline > DateTime.Now)
                        {
                            <p class="status" style="color:@MSColor.FreelancerReDo;white-space: nowrap;">Freelancer đang làm lại</p>
                        }

                        if (item.Status == (int)MilestoneStatusEnum.Completed)
                        {
                            <p class="status" style="color:@MSColor.Completed;white-space: nowrap;">Hoàn thành</p>
                        }
                        if (item.Status == (int)MilestoneStatusEnum.Failed)
                        {
                            <p class="status" style="color:@MSColor.Failed;white-space: nowrap;">Thất bại</p>
                        }
                    }
                </div>
                <div class="col-md-4" style="display: flex;flex-direction:row;justify-content: center;align-items: center;">
                    @if (Model.job.Status == (int)JobStatusEnum.Hiring || Model.job.Status == (int)JobStatusEnum.Hired)
                    {
                        if (Model.job.EmployerDoneEditMilestone == false)
                        {
                            if (item.Status != (int)MilestoneStatusEnum.MoneyPutted)
                            {
                                <button type="button" id="openUpdateMilestone" style="background-color:#00ACD4;color:white;display:inline-block;margin:5px" onclick="OpenUpdateMilestone(@item.MilestoneID)" title="Sửa nội dung milestone"><img src="~/imgExample/pencil.png" alt="Button Edit" style="height:24px"></button>
                                <button type="button" id="openDeleteMilestone" style="background-color:#E19400;color:white;display:inline-block;margin:5px" onclick="OpenDeleteMilestone(@item.MilestoneID)" title="Xóa milestone"><img src="~/imgExample/cross-circle.png" alt="Button Delete" style="height:24px"></button>
                                <button type="button" style="background-color:#2DB964;color:white;display:inline-block;margin:5px" onclick="OpenPutMoneyMilestone(@item.MilestoneID,'@((@item.AmountToPay).ToString(" #,##")) ₫')" title="Đặt tiền vào milestone"><img src="~/imgExample/hand-holding-usd.png" alt="Button put money into milestone" style="height:24px"></button>
                            }
                            else
                            {

                                <button type="button" style="background-color:#2DB964;color:white;display:inline-block;margin" onclick="OpenGetBackMoneyMilestone(@item.MilestoneID,'@((@item.AmountToPay).ToString(" #,##")) ₫')" title="Bỏ đặt tiền"><img src="~/imgExample/refund-alt.png" alt="Get back money" style="height:24px"></button>
                            }
                        }
                        else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == false && Model.job.DeadlineFreelancerConfirm < DateTime.Now)
                        {

                            if (item.Status != (int)MilestoneStatusEnum.MoneyPutted)
                            {
                                <button type="button" id="openUpdateMilestone" style="background-color:#00ACD4;color:white;display:inline-block;margin:5px" onclick="OpenUpdateMilestone(@item.MilestoneID)" title=""><img src="~/imgExample/pencil.png" alt="Sửa nội dung milestone" style="height:24px"></button>
                                <button type="button" id="openDeleteMilestone" style="background-color:#E19400;color:white;display:inline-block;margin:5px" onclick="OpenDeleteMilestone(@item.MilestoneID)" title=""><img src="~/imgExample/cross-circle.png" alt="Xóa milestone" style="height:24px"></button>
                                <button type="button" style="background-color:#2DB964;color:white;display:inline-block;margin:5px" onclick="OpenPutMoneyMilestone(@item.MilestoneID,'@((@item.AmountToPay).ToString(" #,##")) ₫')" title="Đặt tiền vào milestone"><img src="~/imgExample/hand-holding-usd.png" alt="Get back money" style="height:24px"></button>
                            }
                            else
                            {

                                <button type="button" style="background-color:#2DB964;color:white;display:inline-block;margin:5px" onclick="OpenGetBackMoneyMilestone(@item.MilestoneID,'@((@item.AmountToPay).ToString(" #,##")) ₫')" title="Lấy lại tiền trong milestone"><img src="~/imgExample/refund-alt.png" alt="Get back money" style="height:24px"></button>
                            }

                        }
                        else if (item.IsFreelancerDone && item.Deadline > DateTime.Now && (item.Status == (int)MilestoneStatusEnum.MoneyPutted || item.Status == (int)MilestoneStatusEnum.EmployerRejected))
                        {
                            <button type="button" id="openReviewMilestone" style="background-color:#009AFF;color:white;display:inline-block;margin:5px" onclick="OpenReviewMilestone(@item.MilestoneID)" title="Review"><img src="~/imgExample/condition.png" alt="Review" style="height:24px"></button>

                        }
                        else if (item.IsFreelancerDone && item.Deadline < DateTime.Now && (item.Status == (int)MilestoneStatusEnum.MoneyPutted || item.Status == (int)MilestoneStatusEnum.EmployerRejected))
                        {
                            <button type="button" id="openResolveMilestone2" style="background-color:#B85A44;color:white;display:inline-block;margin:5px" onclick="OpenResolveMilestone2(@item.MilestoneID)" title="Giải quyết việc Employer muộn"><img src="~/imgExample/problem-solving.png" alt="Resolve Employer late" style="height:24px"></button>
                        }
                        else if (item.IsFreelancerDone == false && item.Deadline < DateTime.Now && (item.Status == (int)MilestoneStatusEnum.MoneyPutted || item.Status == (int)MilestoneStatusEnum.EmployerRejected))
                        {
                            <button type="button" id="openResolveMilestone1" style="background-color:#B85A44;color:white;display:inline-block;margin:5px" onclick="OpenResolveMilestone1(@item.MilestoneID)" title="Giải quyết việc Freelancer muộn"><img src="~/imgExample/problem-solving.png" alt="Resolve Freelancer late" style="height:24px"></button>
                        }
                    }




                </div>
            </div>
            soThuTu += 1;
            <hr class="hrMilestone">
        }
    </div>
    @if (Model.job.FreelancerId == null || Model.job.FreelancerId == 0)
    {

    }
    else if (Model.job.EmployerDoneEditMilestone == false && Model.job.IsFreelancerConfirm == false)
    {
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                @if (Model.allMSMoneyPutted)
                {
                    <button type="button" id="openRequestFAcceptMS" style="background-color:#009400;color:white;display:block;margin:5px;min-width:200px">Yêu cầu Freelancer chấp nhận kế hoạch</button>
                }
                else
                {
                    <button type="button" id="openRequestFAcceptMS" style="background-color:#009400;color:white;display:block;margin:5px;min-width:200px" hidden>Yêu cầu Freelancer chấp nhận kế hoạch</button>
                }
            </div>
        </div>
    }
    else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == false && Model.job.DeadlineFreelancerConfirm > DateTime.Now)
    {
        <h5 id="requestPlan">Đợi Freelancer phản hồi trong vòng <span style="color:red;font-size:13px" id="countdown"></span></h5>
    }
    else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == false && Model.job.DeadlineFreelancerConfirm < DateTime.Now)
    {
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                @if (Model.allMSMoneyPutted)
                {
                    <button type="button" id="openRequestFAcceptMS" style="background-color:#009400;color:white;display:block;margin:5px;min-width:200px">Yêu cầu Freelancer chấp nhận kế hoạch</button>
                }
                else
                {
                    <button type="button" id="openRequestFAcceptMS" style="background-color:#009400;color:white;display:block;margin:5px;min-width:200px" hidden>Yêu cầu Freelancer chấp nhận kế hoạch</button>
                }

            </div>
        </div>
    }
    else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == true)
    {
        if (Model.job.Status == (int)JobStatusEnum.Completed)
        {
            <h5>Job đã kết thúc thành công.</h5>
            if (Model.isAllowToGiveFeedback)
            {
                <a class="feedbackbtn" asp-page="../Evaluate/EmployerEvaluate" asp-route-jobId="@Model.job.JobId" asp-route-createByUserID="@Model.job.EmployerId">Đánh giá freelancer</a>
            }
        }
        else if (Model.job.Status == (int)JobStatusEnum.Failed)
        {
            <h5>Job đã kết thúc thất bại.</h5>
            if (Model.isAllowToGiveFeedback)
            {
                <a class="feedbackbtn" asp-page="../Evaluate/EmployerEvaluate" asp-route-jobId="@Model.job.JobId" asp-route-createByUserID="@Model.job.EmployerId">Đánh giá freelancer</a>
            }

        }
        else
        {
            <h5>Các bạn đã thống nhất một kế hoạch, bây giờ là lúc làm việc</h5>
        }
    }

</div>
<script>
    var addModal = document.getElementById("addModal");
    var updateModal = document.getElementById("updateModal");
    var deleteModal = document.getElementById("deleteModal");
    var requestModal = document.getElementById("requestModal");
    var putMoneyModal = document.getElementById("putMoneyModal");
    var getBackMoneyModal = document.getElementById("getBackMoneyModal");
    var reviewModal = document.getElementById("reviewModal");
    var resolveModal1 = document.getElementById("resolveModal1");
    var resolveModal2 = document.getElementById("resolveModal2");
    var extendModal = document.getElementById("extendDeadline");
    var failMsModal = document.getElementById("failMsModal");
    var failJobModal = document.getElementById("failJobModal");
    var acceptMilestoneModal = document.getElementById("acceptMilestoneModal");
    // When the user clicks on <span> (x), close the modal
    document.getElementsByClassName("close")[0].onclick = function () {
        requestModal.style.display = "none";
    }
    document.getElementsByClassName("close")[1].onclick = function () {
        addModal.style.display = "none";
    }
    document.getElementsByClassName("close")[2].onclick = function () {
        updateModal.style.display = "none";
    }
    document.getElementsByClassName("close")[3].onclick = function () {
        deleteModal.style.display = "none";
    }
    document.getElementsByClassName("close")[4].onclick = function () {
        putMoneyModal.style.display = "none";
    }
    document.getElementsByClassName("close")[5].onclick = function () {
        getBackMoneyModal.style.display = "none";
    }
    document.getElementsByClassName("close")[6].onclick = function () {
        reviewModal.style.display = "none";
    }
    document.getElementsByClassName("close")[7].onclick = function () {
        resolveModal1.style.display = "none";
    }
    document.getElementsByClassName("close")[8].onclick = function () {
        resolveModal2.style.display = "none";
    }
    document.getElementsByClassName("close")[9].onclick = function () {
        extendModal.style.display = "none";
    }
    document.getElementsByClassName("close")[10].onclick = function () {
        failMsModal.style.display = "none";
    }
    document.getElementsByClassName("close")[11].onclick = function () {
        failJobModal.style.display = "none";
    }
    document.getElementsByClassName("close")[12].onclick = function () {
        acceptMilestoneModal.style.display = "none";
    }
    // When the user clicks the button, open the modal
    document.getElementById("openAddMilestone").onclick = function () {
        addModal.style.display = "block";
    }
    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == requestModal) {
            requestModal.style.display = "none";
        }
        if (event.target == addModal) {
            addModal.style.display = "none";
        }
        if (event.target == updateModal) {
            updateModal.style.display = "none";
        }
        if (event.target == deleteModal) {
            deleteModal.style.display = "none";
        }
        if (event.target == putMoneyModal) {
            putMoneyModal.style.display = "none";
        }
        if (event.target == getBackMoneyModal) {
            getBackMoneyModal.style.display = "none";
        }
        if (event.target == reviewModal) {
            reviewModal.style.display = "none";
        }
        if (event.target == resolveModal1) {
            resolveModal1.style.display = "none";
        }
        if (event.target == resolveModal2) {
            resolveModal2.style.display = "none";
        }
        if (event.target == extendModal) {
            extendModal.style.display = "none";
        }
        if (event.target == failMsModal) {
            failMsModal.style.display = "none";
        }
        if (event.target == failJobModal) {
            failJobModal.style.display = "none";
        }
        if (event.target == acceptMilestoneModal) {
            acceptMilestoneModal.style.display = "none";
        }
    }
</script>
<script>
    function validateDateTimeAdd(nameOfDateTag, nameOfAmountToPayTag) {
        var inputDateTime = new Date(document.getElementsByName(nameOfDateTag)[0].value);
        var inputAmountToPay = document.getElementsByName(nameOfAmountToPayTag)[0].value.replace(/\D/g, '');
        var errorMessage = document.getElementById("AddErrorMessage");
        errorMessage.innerHTML = "";


        var currentDateTime = new Date();

        if (inputDateTime <= currentDateTime) {
            errorMessage.innerHTML = "Hãy chọn một ngày ở tương lai.";
            return false;
        }
        if (parseInt(inputAmountToPay) <= 0) {
            errorMessage.innerHTML = "Số tiền phải lớn hơn số không.";
            return false;
        }
        return true;
    }
    function validateDateTimeUpdate(nameOfDateTag, nameOfAmountToPayTag) {
        var inputDateTime = new Date(document.getElementsByName(nameOfDateTag)[0].value);
        var inputAmountToPay = document.getElementsByName(nameOfAmountToPayTag)[0].value.replace(/\D/g, '');
        var errorMessage = document.getElementById("UpdateErrorMessage");
        errorMessage.innerHTML = "";


        var currentDateTime = new Date();

        if (inputDateTime <= currentDateTime) {
            errorMessage.innerHTML = "Hãy chọn một ngày ở tương lai.";
            return false;
        }
        if (parseInt(inputAmountToPay) <= 0) {
            errorMessage.innerHTML = "Số tiền phải lớn hơn số không.";
            return false;
        }
        return true;
    }
    function validateDateTimeRequest(nameOfDateTag) {
        var inputDateTime = new Date(document.getElementsByName(nameOfDateTag)[0].value);
        var errorMessage = document.getElementById("RequestErrorMessage");
        errorMessage.innerHTML = "";


        var currentDateTime = new Date();

        if (inputDateTime <= currentDateTime) {
            errorMessage.innerHTML = "Hãy chọn một ngày ở tương lai.";
            return false;
        }
        if (inputDateTime > new Date(@Model.nearestDatelineOfMS.Year, @Model.nearestDatelineOfMS.Month - 1, @Model.nearestDatelineOfMS.Day, @Model.nearestDatelineOfMS.Hour, @Model.nearestDatelineOfMS.Minute, @Model.nearestDatelineOfMS.Second)) {
            errorMessage.innerHTML = "Hạn cho Freelancer chấp nhận cần phải trước hạn của milestone gần nhất ít nhất 1 ngày.";
            return false;
        }
        return true;
    }
    function validateDateTimeExtend(nameOfDateTag) {
        var inputDateTime = new Date(document.getElementsByName(nameOfDateTag)[0].value);
        var errorMessage = document.getElementById("ExtendErrorMessage");
        errorMessage.innerHTML = "";


        var currentDateTime = new Date();

        if (inputDateTime <= currentDateTime) {
            errorMessage.innerHTML = "Hãy chọn một ngày ở tương lai.";
            return false;
        }
        return true;
    }
</script>
<script>
    function OpenUpdateMilestone(UpdateMilestoneID) {
        var milestoneContent = document.getElementById("MilestoneContent_" + UpdateMilestoneID).innerHTML;
        var deadline = document.getElementById("Deadline_" + UpdateMilestoneID).innerHTML;
        var amountToPay = document.getElementById("AmountToPay_" + UpdateMilestoneID).innerHTML;

        document.getElementsByName("UpdateMilestoneID")[0].value = UpdateMilestoneID;
        document.getElementsByName("UpdateMilestoneContent")[0].value = milestoneContent;
        document.getElementsByName("UpdateDeadline")[0].value = deadline;
        document.getElementsByName("UpdateAmountToPay")[0].value = amountToPay;

        updateModal.style.display = "block";
    }
    function OpenDeleteMilestone(DeleteMilestoneID) {
        var milestoneContent = document.getElementById("MilestoneContent_" + DeleteMilestoneID).innerHTML;
        var deadline = document.getElementById("Deadline_" + DeleteMilestoneID).innerHTML;
        var amountToPay = document.getElementById("AmountToPay_" + DeleteMilestoneID).innerHTML;
        var status = document.getElementById("ShowStatus_" + DeleteMilestoneID).innerHTML;

        document.getElementsByName("DeleteMilestoneID")[0].value = DeleteMilestoneID;
        document.getElementsByName("DeleteMilestoneContent")[0].value = milestoneContent;
        document.getElementsByName("DeleteDeadline")[0].value = deadline;
        document.getElementsByName("DeleteAmountToPay")[0].value = amountToPay;
        document.getElementsByName("DeleteStatus")[0].innerHTML = status;

        deleteModal.style.display = "block";
    }
    function OpenPutMoneyMilestone(PutMoneyMilestoneID, PutMoneyMilestoneAmount) {
        var accountMoney = document.getElementById("amount").innerHTML;
        document.getElementsByName("PutMoneyMilestoneID")[0].value = PutMoneyMilestoneID;
        document.getElementById("putMoneyInformation").innerHTML = "Bạn có " + accountMoney + " trong tài khoản.";
        document.getElementById("putMoneyQuestion").innerHTML = "Đặt " + PutMoneyMilestoneAmount + " vào milestone này.";
        putMoneyModal.style.display = "block";
    }
    function OpenGetBackMoneyMilestone(GetBackMoneyMilestoneID, GetBackMoneyMilestoneAmount) {
        document.getElementsByName("GetBackMoneyMilestoneID")[0].value = GetBackMoneyMilestoneID;
        document.getElementById("getBackMoneyQuestion").innerHTML = "Bỏ đặt " + GetBackMoneyMilestoneAmount + " ở milestone này.";
        getBackMoneyModal.style.display = "block";
    }
    function OpenReviewMilestone(ReviewMilestoneID) {
        document.getElementsByName("ReviewMilestoneID")[0].value = ReviewMilestoneID;
        reviewModal.style.display = "block";
    }
    function OpenResolveMilestone1(ResolveMilestone1ID) {
        document.getElementsByName("ResolveMilestone1ID")[0].value = ResolveMilestone1ID;
        document.getElementsByName("ResolveMilestone2ID")[0].value = ResolveMilestone1ID;
        document.getElementById("OpenExtendDeadline1").onclick = function () { OpenExtendDeadline(ResolveMilestone1ID) };
        document.getElementById("OpenConfirmFailMilestone1").onclick = function () {
            OpenConfirmFailMilestone(ResolveMilestone1ID)
        };
        document.getElementById("OpenConfirmFailJob1").onclick = function () {
            OpenConfirmFailJob(ResolveMilestone1ID)
        };
        resolveModal1.style.display = "block";
    }
    function OpenResolveMilestone2(ResolveMilestone2ID) {
        document.getElementsByName("ResolveMilestone1ID")[0].value = ResolveMilestone2ID;
        document.getElementsByName("ResolveMilestone2ID")[0].value = ResolveMilestone2ID;
        document.getElementById("OpenExtendDeadline2").onclick = function () { OpenExtendDeadline(ResolveMilestone2ID) };
        document.getElementById("OpenAcceptMilestone2").onclick = function () { OpenAcceptMilestone(ResolveMilestone2ID) };
        document.getElementById("OpenConfirmFailMilestone2").onclick = function () {
            OpenConfirmFailMilestone(ResolveMilestone2ID)
        };
        document.getElementById("OpenConfirmFailJob2").onclick = function () {
            OpenConfirmFailJob(ResolveMilestone2ID)
        };
        resolveModal2.style.display = "block";
    }
    function OpenExtendDeadline(ResolveMilestoneID) {
        resolveModal1.style.display = "none";
        resolveModal2.style.display = "none";
        document.getElementsByName("ExtendDeadlineMilestoneID")[0].value = ResolveMilestoneID;
        extendModal.style.display = "block";
    }
    function OpenConfirmFailMilestone(ResolveMilestoneID) {
        resolveModal1.style.display = "none";
        resolveModal2.style.display = "none";
        document.getElementsByName("FailMsMilestoneID")[0].value = ResolveMilestoneID;
        failMsModal.style.display = "block";
    }
    function OpenConfirmFailJob(ResolveMilestoneID) {
        resolveModal1.style.display = "none";
        resolveModal2.style.display = "none";
        document.getElementsByName("FailJobMilestoneID")[0].value = ResolveMilestoneID;
        failJobModal.style.display = "block";
    }
    function OpenAcceptMilestone(ResolveMilestoneID) {
        resolveModal1.style.display = "none";
        resolveModal2.style.display = "none";
        document.getElementsByName("AcceptMs2")[0].value = ResolveMilestoneID;
        acceptMilestoneModal.style.display = "block";
    }
</script>
<script>
    document.getElementsByName("AddAmountToPay")[0].addEventListener('change', function () {
        // Get the input element
        var input = document.getElementsByName("AddAmountToPay")[0];
        var input1 = input.value.replace(/\D/g, '');
        //var input1 = input.value.replaceAll(",", "");
        //input1 = input1.replaceAll("₫", "");
        //input1 = input1.replaceAll(" ", "");
        // Get the value and convert it to a number
        var value = parseFloat(input1);
        // Check if the value is a valid number
        if (!isNaN(value)) {
            // Format the number with dots for thousands separator
            var formattedValue = value.toLocaleString('en', { maximumFractionDigits: 0 }) + " ₫";

            // Update the input field with the formatted value
            input.value = formattedValue;
        }
    }, false);
</script>
<script>
    document.getElementsByName("UpdateAmountToPay")[0].addEventListener('change', function () {
        // Get the input element
        var input = document.getElementsByName("UpdateAmountToPay")[0];
        var input1 = input.value.replace(/\D/g, '');
        //var input1 = input.value.replaceAll(",", "");
        //input1 = input1.replaceAll("₫", "");
        //input1 = input1.replaceAll(" ", "");
        // Get the value and convert it to a number
        var value = parseFloat(input1);
        // Check if the value is a valid number
        if (!isNaN(value)) {
            // Format the number with dots for thousands separator
            var formattedValue = value.toLocaleString('en', { maximumFractionDigits: 0 }) + " ₫";

            // Update the input field with the formatted value
            input.value = formattedValue;
        }
    }, false);
</script>
<script>
    function hideModal() {
        addModal.style.display = "none";
        updateModal.style.display = "none";
        deleteModal.style.display = "none";
        requestModal.style.display = "none";
        putMoneyModal.style.display = "none";

        reviewModal.style.display = "none";
        resolveModal1.style.display = "none";
        resolveModal2.style.display = "none";
        extendModal.style.display = "none";
        failMsModal.style.display = "none";
        failJobModal.style.display = "none";
    }
</script>
@*if E done edit and Time less than time now*@
@if (Model.job.EmployerDoneEditMilestone == false && Model.job.IsFreelancerConfirm == false)
{
    <script>
        document.getElementById("openRequestFAcceptMS").onclick = function () {
            requestModal.style.display = "block";
        }
    </script>
}
else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == false)
{
    <script>
        function startCountdown(targetDate, countdownId) {
            var countdownInterval = setInterval(function () {
                var now = new Date();
                var timeDifference = targetDate - now;
                var days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
                var hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
                document.getElementById(countdownId).innerHTML = "(" + days + "d " + hours + "h " + minutes + ":" + (seconds < 10 ? "0" : "") + seconds + ")";
                if (timeDifference < 0) {
                    clearInterval(countdownInterval);
                    document.getElementById("requestPlan").innerHTML = "Xin hãy tải lại trang web.";
                }
            }, 1000);
        }
        var x = new Date("@(Model.job.DeadlineFreelancerConfirm.ToString("yyyy-MM-ddTHH:mm:ss"))");
        startCountdown(x, "countdown");
        document.getElementById("openRequestFAcceptMS").onclick = function () {
            requestModal.style.display = "block";
        }
    </script>
}
else if (Model.job.EmployerDoneEditMilestone == true && Model.job.IsFreelancerConfirm == true)
{

}
@*<script>
    function FormatDateTimeLocal(elementId){
        document.getElementById(elementId).addEventListener('change', function () {
        // Get the input element
        var input = document.getElementById(elementId);
        var d = new Date(input.value);

        // Get the value and convert it to a format dd-MM-yyyy HH:mm
        var formattedValue = ("0" + d.getDate()).slice(-2) + "-" + ("0"+(d.getMonth()+1)).slice(-2) + "-" + d.getFullYear() + " " + ("0" + d.getHours()).slice(-2) + ":" + ("0" + d.getMinutes()).slice(-2);

        // Update the input field with the formatted value
            input.value = formattedValue;
    }, false);
    }
    FormatDateTimeLocal("addModalDTL");
    FormatDateTimeLocal("updateModalDTL");
    FormatDateTimeLocal("requestModalDTL");
    FormatDateTimeLocal("extendDeadlineDTL");
</script>*@



