@page
@using OpusLink.Entity.DTO.JobDTO;
@using OpusLink.Entity.Models;
@using OpusLink.Shared.Enums;
@using OpusLink.Shared.Constants
@inject IHttpContextAccessor HttpContextAccessor;
@model OpusLink.User.Hosted.Pages.JOB.EmployerViewJobDetailPageModel
@{
    GetJobDetailResponse item = Model.job;
}
@{
    ViewData["Title"] = "Employer View Job Detail";
    int userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId") ?? 0;
}
<style>

    .link {
        text-decoration: none;
        font-weight: bold;
    }

        .link:hover {
            cursor: pointer;
        }

    .hireButton{
        width:100px; 
        background-color: #DDCB37;
        color:white;
        font-weight:bold;
        font-size:18px;
        height:30px;
        bottom:0px;
        margin-top:20px
    }
    .status {
        font-weight: bold;
        color: white;
        text-align: center;
        display: inline-block;
    }

    .category {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
    }

    .categoryFake {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
        opacity: 0.6;
    }

        .categoryFake:hover {
            cursor: pointer;
        }

    .skill {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
    }

    .skillFake {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
        opacity: 0.6;
    }

        .skillFake:hover {
            cursor: pointer;
        }

    #countdown {
        font-size: 24px;
        font-weight: bold;
    }
</style>
<div class="row" style="margin:10px 0px 10px 0px">
    <div class="col-md-1"></div>
    <div class="col-md-10">
        <div style="display:inline-block;text-align:center;position: relative;width:100%;height:50px">
            <a href="../JOB/EmployerViewAllJobCreatedPage" style="position: absolute;top: 50%;left: 0px;">Back to list</a>
            @if (item.IsFreelancerConfirm ==false)
            {
                <a asp-page="./EmployerUpdateJobPage" asp-route-JobId="@item.JobId" style="width:50px; background-color:#4A86E8;color:white;font-weight:bold;font-size:18px;position: absolute;height:30px;bottom:0px;right: 10px;text-decoration: none;" title="Sửa nội dung">
                    <img src="~/imgExample/pencil.png" style="height:60%">
                </a>
            }
        </div>
        <div class="row">
            <div class="col-md-3">
                @{
                    if (item.EmployerImageBytes != null && item.EmployerImageBytes.Length > 0)
                    {
                        var base64Image = Convert.ToBase64String(item.EmployerImageBytes);
                        var imgSrc = $"data:image/png;base64,{base64Image}";
                        <img id="profileImage" src="@imgSrc" style="width:50%;height:auto;display:block" />
                    }
                    else
                    {
                        <img id="profileImage" src="/imgExample/default.png" style="width:50%;height:auto;display:block" />
                    }
                }
                <a asp-page="../Employer/Profile/ViewsProfileFreelancer" asp-route-UserId="@item.EmployerId" class="link" style="display:block">@item.EmployerName</a>
                <div id="feedbackInfo"></div>
                <p>Thông tin công việc:</p>
                <table style="width:100%;font-size:13px">
                    <tr><td>Id việc:</td><td>@item.JobId</td></tr>
                    <tr><td style="width:100px">Ngày đăng:</td><td>@item.DateCreated.ToString("dd/MM/yyyy")</td></tr>
                    <tr><td>Ngân sách:</td><td>@Math.Round(item.BudgetMin,0).ToString("#,##") ₫<span style="display:inline-block"> - </span>@Math.Round(item.BudgetMax,0).ToString("#,##") ₫</td></tr>
                    <tr><td>Địa điểm:</td><td>@item.Location</td></tr>
                </table>
                
            </div>
            <div class="col-md-9">
                <div>
                    <p style="font-weight:bold;display:inline-block">@item.JobTitle</p>
                    @if (item.Status == (int)JobStatusEnum.NotApprove)
                    {
                        <p class="status" style="background-color:#CDCDCD;margin:0px;padding:0px 4px 0px 4px">Not Approved</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Hiring)
                    {
                        if (item.EndHiringDate < DateTime.Now)
                        {
                            <p class="status" style="background-color:#B5681C;margin:0px;padding:0px 4px 0px 4px">Hiring expried</p>
                        }
                        else
                        {
                            <p class="status" style="background-color:#00A424;margin:0px;padding:0px 4px 0px 4px">Hiring</p> <span style="color:red;font-size:13px" id="countdown_@item.JobId"></span>
                        }
                    }
                    else if (item.Status == (int)JobStatusEnum.Hired)
                    {
                        <p class="status" style="background-color:#0068AD;margin:0px;padding:0px 4px 0px 4px">Hired</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Completed)
                    {
                        <p class="status" style="background-color:#FF6D00;margin:0px;padding:0px 4px 0px 4px">Completed</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Failed)
                    {
                        <p class="status" style="background-color:#FF6D00;margin:0px;padding:0px 4px 0px 4px">Failed</p>
                    }
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <p style="display:inline-block">Danh mục: </p>
                    </div>
                    <div class="col-md-10">
                        @if (item.Categories.Count > 4)
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                <div class="category">@item.Categories.ElementAt(i).CategoryName</div>
                            }
                            <div name="hidden_fake_category_@item.JobId" class="categoryFake" onclick="DisplayAllCategory('@item.JobId')">. . .</div>
                            for (int i = 4; i < item.Categories.Count; i++)
                            {
                                <div name="hidden_category_@item.JobId" class="category" style="display: none;">@item.Categories.ElementAt(i).CategoryName</div>
                            }
                        }
                        else
                        {
                            foreach (GetCategoryResponse category in item.Categories)
                            {
                                <div class="category">@category.CategoryName</div>
                            }
                        }
                    </div>
                </div>
                @*<p style="white-space: pre-line">@Html.Raw(item.JobContent.Replace("\r\n", "&#10;"))</p>*@
                <p style="white-space: pre-line;margin-top:10px">@item.JobContent</p>
                <div class="row">
                    <div class="col-md-4">Tổng số offer: @item.TotalOffer</div>
                    <div class="col-md-4">Trung bình: @(Math.Round(item.AverageCost, 0).ToString("#,##")) ₫</div>
                    <div class="col-md-4">Trung bình thời lượng: @item.AverageTime ngày</div>
                </div>
                <a asp-page="../MS/EmployerViewAllMS" asp-route-jobID="@item.JobId" class="link">Xem milestones</a>
            </div>
        </div>
        @if (Model.offers.Count > 0)
        {
            <p style="width:100%;text-align:center;color:#4A86E8;font-size:30px">Offer nhận được</p>
        }
        else
        {
            <p style="width:100%;text-align:center;color:#4A86E8;font-size:20px">Chưa có offer</p>
        }
        <div>
            @foreach (var a in Model.offers)
            {
                <div class="row" style="box-shadow: 0px 0px 4px 4px #DCDCDC;border-radius:5px;margin-bottom:30px">
                    <div class="col-md-3">
                        <table>
                            <tr>
                                <td rowspan="2">
                                    @{
                                        if (a.FreelancerImageBytes != null && a.FreelancerImageBytes.Length > 0)
                                        {
                                            var base64Image = Convert.ToBase64String(a.FreelancerImageBytes);
                                            var imgSrc = $"data:image/png;base64,{base64Image}";
                                            <img id="profileImage_@a.OfferID" src="@imgSrc" style="width:80%;height:auto;display:block" />
                                        }
                                        else
                                        {
                                            <img id="profileImage" src="/imgExample/default.png" style="width:80%;height:auto;display:block" />
                                        }
                                    }
                                </td>
                                <td>
                                    <a asp-page="../Employer/Profile/ViewsProfileFreelancer" asp-route-UserId="@a.FreelancerID" class="link">@a.FreelancerName</a>
                                </td>
                            </tr>
                            <tr><td><div id="feedbackFreeLancer@(a.FreelancerID)"><p>@a.FreelancerStarMedium⭐ (x đánh giá)</p></div></td></tr>
                        </table>
                        <div>
                            @if (a.Skills.Count > 3)
                            {
                                for (int i = 0; i < 3; i++)
                                {
                                    <div class="skill">@a.Skills.ElementAt(i)</div>
                                }
                                <div name="hidden_fake_skill_@a.OfferID" class="skillFake" onclick="DisplayAllSkill('@a.OfferID')">. . .</div>
                                for (int i = 3; i < a.Skills.Count; i++)
                                {
                                    <div name="hidden_skill_@a.OfferID" class="skill" style="display: none;">@a.Skills.ElementAt(i)</div>
                                }
                            }
                            else
                            {
                                foreach (string skill in a.Skills)
                                {
                                    <div class="skill">@skill</div>
                                }
                            }
                        </div>
                        <p>Số việc đã làm: @a.NumberOfJobDone</p>
                        <button type="button">Nhắn tin</button>
                    </div>
                    <div class="col-md-7" style="border-left:2px solid #BEBEBE; padding-top:10px">
                        <p>@a.DateOffer.ToString("dd/MM/yyyy HH:mm")</p>
                        <p><span style="font-weight:normal;">Trả giá:   </span><span style="font-size:20px">@(((int)a.ProposedCost).ToString("#,##")) ₫</span></p>
                        <p><span style="font-weight:normal;">Số ngày dự kiến:   </span> <span style="font-size:20px">@a.ExpectedDays ngày</span></p>
                        <p style="white-space:pre-line"><span style="font-weight:bold">Tự giới thiệu:</span><br> @a.SelfIntroduction</p>
                        <p style="white-space:pre-line"><span style="font-weight:bold">Kế hoạch dự tính:</span><br> @a.EstimatedPlan</p>
                    </div>
                    <div class="col-md-2">
                        <form method="post">
                            <input type="text" hidden name="JobID" value="@item.JobId"/>
                            <input type="text" hidden name="FreelancerID" value="@a.FreelancerID"/>
                            @if(item.FreelancerId!=null && item.FreelancerId == a.FreelancerID)
                            {
                                @if (Model.job.EmployerDoneEditMilestone == false)
                                {
                                    <button type="submit" class="hireButton" style="background-color:#7E2100" asp-page-handler="ForCancelHire">Bỏ chọn</button>

                                }
                                else
                                {
                                    <button type="submit" class="hireButton" asp-page-handler="ForHire" disabled>Đã chọn</button>
                                }

                            }
                            else if (item.FreelancerId != null && item.FreelancerId != a.FreelancerID)
                            {
                                <button type="button" class="hireButton" style="background-color:#D4D4D4" disabled>Chọn</button>
                            }
                            else
                            {
                                <button type="submit" class="hireButton" style="background-color:#7E2100" asp-page-handler="ForHire">Chọn</button>
                            }

                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-md-1"></div>
</div>
<script>
    function DisplayAllCategory(JobID) {
        document.getElementsByName('hidden_fake_category_' + JobID)[0].style.display = "none";
        var hiddenCategory = document.getElementsByName('hidden_category_' + JobID);
        hiddenCategory.forEach(function (hiddenCategory) {
            hiddenCategory.style.display = "inline-block";
        })
    }
    function DisplayAllSkill(OfferID) {
        document.getElementsByName('hidden_fake_skill_' + OfferID)[0].style.display = "none";
        var hiddenSkill = document.getElementsByName('hidden_skill_' + OfferID);
        hiddenSkill.forEach(function (hiddenSkill) {
            hiddenSkill.style.display = "inline-block";
        })
    }
</script>
<script>

    function startCountdown(endHiringDate, countdownId) {
        var countdownInterval = setInterval(function () {
            var now = new Date();
            var totalSeconds = Math.floor((endHiringDate - now) / 1000);
            var days = Math.floor(totalSeconds / (60 * 60 * 24));
            var hours = Math.floor((totalSeconds % (60 * 60 * 24)) / (60 * 60));
            var minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
            var seconds = Math.floor((totalSeconds % (60)));
            document.getElementById(countdownId).innerHTML = "(" + days + "d " + hours + "h " + minutes + ":" + (seconds < 10 ? "0" : "") + seconds + ")";
            if (totalSeconds < 0) {
                clearInterval(countdownInterval);
                document.getElementById(countdownId).innerHTML = "Hiring Expried";
            }
        }, 1000);
    }
    @if (Model.job.Status == (int)JobStatusEnum.Hiring && Model.job.EndHiringDate > DateTime.Now)
    {
        <text>
                      var x = new Date("@(Model.job.EndHiringDate.ToString("yyyy-MM-ddTHH:mm:ss"))");
        startCountdown(x, "countdown_" + @Model.job.JobId);
        </text>
    }
    
</script>
<script>
    // Function to fetch and display feedback information
    function displayFeedbackInfo() {
        var employerId = @item.EmployerId; // Assuming EmployerId is an integer
        fetch(`@(UrlConstant.ApiBaseUrl)/Feedback/AverageStars/${employerId}`, {
            method: "GET",
            headers: {
                "ngrok-skip-browser-warning": true,
                "Authorization": "Bearer " + "@(HttpContextAccessor.HttpContext.Session.GetString("token"))",
            }
        })
            .then(response => response.json())
            .then(data => {
                document.getElementById('feedbackInfo').innerHTML = `
                                    <p> ${data.averageStars}⭐(${data.numberOfEntries} Lượt đánh giá)</p>
                        `;
            })
            .catch(error => {
                console.error('Error fetching feedback information:', error);
            });
    }

    // Call the function to display feedback information when the page loads
    displayFeedbackInfo();
</script>
<script>
    // Function to fetch and display feedback information for the freelancer
    function displayFeedbackFreelancer(freelancerID) {
        fetch(`@(UrlConstant.ApiBaseUrl)/Feedback/AverageStars/${freelancerID}`, {
            method: "GET", headers: {
                "ngrok-skip-browser-warning": true,
                "Authorization": "Bearer " + "@(HttpContextAccessor.HttpContext.Session.GetString("token"))",
            }
        })
            .then(response => response.json())
            .then(data => {
                var feedbackFreelancerDiv = document.getElementById('feedbackFreeLancer' + freelancerID);
                feedbackFreelancerDiv.innerHTML = `
                            <p>${data.averageStars}⭐ (${data.numberOfEntries} đánh giá)</p>
                        `;
            })
            .catch(error => {
                console.error('Error fetching feedback information:', error);
            });
    }

</script>
@foreach (var a in Model.offers)
{
    <script>
        // Call the function to display feedback information for the freelancer when the page loads
        displayFeedbackFreelancer(@a.FreelancerID);
    </script>

}