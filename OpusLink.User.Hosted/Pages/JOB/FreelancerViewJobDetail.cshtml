@page
@using OpusLink.Entity.DTO.JobDTO;
@using OpusLink.Entity.Models;
@using OpusLink.Shared.Enums;
@using OpusLink.Shared.Color;
@using OpusLink.Shared.Constants
@inject IHttpContextAccessor HttpContextAccessor;
@model OpusLink.User.Hosted.Pages.JOB.FreelancerViewJobDetailModel
@{
    GetJobDetailResponse item = Model.job;
}
@{
    ViewData["Title"] = "Freelancer View Job Detail";
}
<style>

    .link {
        text-decoration: none;
        font-weight: bold;
    }

        .link:hover {
            cursor: pointer;
        }

    .status {
        font-weight: bold;
        color: white;
        text-align: center;
        display: inline-block;
    }

    .category {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
    }

    .categoryFake {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
        opacity: 0.6;
    }

        .categoryFake:hover {
            cursor: pointer;
        }

    .skill {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
    }

    .skillFake {
        display: inline-block;
        margin-bottom: 3px;
        background-color: lightblue;
        padding: 7px;
        border-radius: 5px;
        font-size: 14px;
        opacity: 0.6;
    }

    .tinnhan-btn {
        /* Thiết lập các thuộc tính CSS tùy theo ý của bạn */
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff; /* Màu nền */
        color: #fff; /* Màu chữ */
        text-decoration: none;
        border-radius: 5px;
    }

        /* CSS khi hover */
        .tinnhan-btn:hover {
            background-color: #0056b3; /* Màu nền khi hover */
            color: #fff; /* Màu chữ khi hover */
        }
        .skillFake:hover {
            cursor: pointer;
        }

    #countdown {
        font-size: 24px;
        font-weight: bold;
    }
</style>
@{
    int userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId") ?? -1;
    bool IsThisFreelancerGetAcceptToTheJob = false;
    string AddReadonlyIfThisFreelancerGetAcceptedToTheJob = "";
    if ((item.FreelancerId??=0) == userId)
    {
        AddReadonlyIfThisFreelancerGetAcceptedToTheJob = "readonly";
        IsThisFreelancerGetAcceptToTheJob = true;
    }
    bool IsThisJobExpried=false;
    //if(item.)
}
<div class="row" style="margin:10px 0px 10px 0px">
    <div class="col-md-1"></div>
    <div class="col-md-10">
        @*<a href="../JOB/FreelancerViewAllJobPage">Back to list</a>*@
        <div class="row">
            <div class="col-md-3" style="margin-bottom:10px">
                @{
                    if (item.EmployerImageBytes != null && item.EmployerImageBytes.Length > 0)
                    {
                        var base64Image = Convert.ToBase64String(item.EmployerImageBytes);
                        var imgSrc = $"data:image/png;base64,{base64Image}";
                        <img id="profileImage" src="@imgSrc" style="width:50%;height:auto;display:block" />
                    }
                    else
                    {
                        <img id="profileImage" src="/imgExample/default.png" style="width:50%;height:auto;display:block" />
                    }
                }
                <a asp-page="../Freelancer/Profile/ViewsProfileEmployer" asp-route-UserId="@item.EmployerId" class="link">@item.EmployerName</a>
                <div id="feedbackInfo"><p>@item.EmployerStarMedium⭐ (x đánh giá)</p></div>
                <p>Thông tin công việc:</p>
                <table style="width:100%;font-size:13px">
                    <tr><td>Id việc:</td><td>@item.JobId</td></tr>
                    <tr><td style="width:100px">Ngày đăng:</td><td>@item.DateCreated.ToString("dd/MM/yyyy")</td></tr>
                    <tr><td>Ngân sách:</td><td>@Math.Round(item.BudgetMin,0).ToString("#,##") ₫<span style="display:inline-block"> - </span>@Math.Round(item.BudgetMax,0).ToString("#,##") ₫</td></tr>
                    <tr><td>Địa điểm:</td><td>@item.Location</td></tr>
                </table>
                <a class="tinnhan-btn" asp-page="/Chat/ChatList" asp-page-handler="AddChatBox" asp-route-EmployerId="@item.EmployerId" asp-route-FreeLancerId="@userId" asp-route-JobId="@item.JobId">Nhắn tin với Employer</a>
            </div>
            <div class="col-md-9">
                <div>
                    <p style="font-weight:bold;display:inline-block">@item.JobTitle</p>
                    @if (item.Status == (int)JobStatusEnum.NotApprove)
                    {
                        <p class="status" style="background-color:@JobColor.NotApprove;margin:0px;padding:0px 4px 0px 4px">Not Approved</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Hiring)
                    {
                        if (item.EndHiringDate < DateTime.Now)
                        {
                            <p class="status" style="background-color:@JobColor.HiringExpried;margin:0px;padding:0px 4px 0px 4px">Hiring expried</p>
                        }
                        else
                        {
                            <p class="status" style="background-color:@JobColor.Hiring;margin:0px;padding:0px 4px 0px 4px">Hiring</p> <span style="color:red;font-size:13px" id="countdown_@item.JobId"></span>
                        }
                    }
                    else if (item.Status == (int)JobStatusEnum.Hired)
                    {
                        <p class="status" style="background-color:@JobColor.Hired;margin:0px;padding:0px 4px 0px 4px">Hired</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Completed)
                    {
                        <p class="status" style="background-color:@JobColor.Completed;margin:0px;padding:0px 4px 0px 4px">Completed</p>
                    }
                    else if (item.Status == (int)JobStatusEnum.Failed)
                    {
                        <p class="status" style="background-color:@JobColor.Failed;margin:0px;padding:0px 4px 0px 4px">Failed</p>
                    }
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <p style="display:inline-block">Danh mục: </p>
                    </div>
                    <div class="col-md-10">
                        @if (item.Categories.Count > 4)
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                <div class="category">@item.Categories.ElementAt(i).CategoryName</div>
                            }
                            <div name="hidden_fake_category_@item.JobId" class="categoryFake" onclick="DisplayAllCategory('@item.JobId')">. . .</div>
                            for (int i = 4; i < item.Categories.Count; i++)
                            {
                                <div name="hidden_category_@item.JobId" class="category" style="display: none;">@item.Categories.ElementAt(i).CategoryName</div>
                            }
                        }
                        else
                        {
                            foreach (GetCategoryResponse category in item.Categories)
                            {
                                <div class="category">@category.CategoryName</div>
                            }
                        }
                    </div>
                </div>
                @*<p style="white-space: pre-line">@Html.Raw(item.JobContent.Replace("\r\n", "&#10;"))</p>*@
                <p style="white-space: pre-line;margin-top:10px">Mô tả công việc: @item.JobContent</p>
                @if (Model.offers.Count != 0)
                {
                    <div class="row">
                        <div class="col-md-4">Tổng số offer: @item.TotalOffer</div>
                        <div class="col-md-4">Trung bình: @Math.Round(item.AverageCost,0).ToString("#,##") ₫</div>
                        <div class="col-md-4">Trung bình thời lượng: @item.AverageTime ngày</div>
                    </div>
                }
                <a asp-page="../MS/FreelancerViewAllMS" asp-route-jobID="@item.JobId" class="link" >Xem milestones </a>
            </div>
        </div>
        @{
            int aa = 0;
            string b = DateTime.Now.ToString(), e = "", f = "";
            int c = 0;
            if (Model.isOffered)
            {
                aa = Model.offerResponse.OfferID;
                b = "value=\"" + Model.offerResponse.DateOffer + "\"";
                c = (int)Model.offerResponse.ProposedCost;
                e = Model.offerResponse.SelfIntroduction;
                f = Model.offerResponse.EstimatedPlan;
            }
        }
        @if (item.EndHiringDate < DateTime.Now)
        {
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <p style="color:red">Công việc này đã hết hạn nhận đơn</p>
                </div>
                <div class="col-md-2"></div>
            </div>
        }
        else if (item.Status == (int)JobStatusEnum.Hiring || (item.Status == (int)JobStatusEnum.Hired && item.IsFreelancerConfirm==false) || (item.Status == (int)JobStatusEnum.Hired && IsThisFreelancerGetAcceptToTheJob))
        {
            <form method="post" style="box-shadow: 0px 0px 4px 4px #DCDCDC;border-radius:5px;margin-top:30px;padding:8px 12px 8px 12px">
                <div class="row">
                    <div class="col-md-4">
                        <input type="number" name="offerId" value="@aa" hidden />
                        <input type="number" name="jobId" value="@Model.job.JobId" hidden />
                        <input type="number" name="dateOffer" @b hidden />
                        <label style="font-weight:bold;font-size:20px;display:block">Đề xuất ngân sách<span style="color:red">*</span></label>
                        <input type="text" id="proposedCost" name="proposedCost" placeholder="5,000,000 ₫" value="@c" required @AddReadonlyIfThisFreelancerGetAcceptedToTheJob />
                        <label style="font-weight:bold;font-size:20px;display:block">Thời lượng dự tính<span style="color:red">*</span></label>
                        <select name="expectedDays" style="width:100%" @AddReadonlyIfThisFreelancerGetAcceptedToTheJob>
                            @for (int i = 1; i < 101; i++)
                            {
                                if (i == Model.offerResponse.ExpectedDays)
                                {
                                    <option value="@i" selected>@(i) ngày</option>
                                }
                                else if (i == 1)
                                {
                                    <option value="@(i*2)">@(i * 2) ngày</option>
                                }
                                else
                                {
                                    <option value="@(i*2)">@(i * 2) ngày</option>
                                }

                            }
                        </select>
                        @if (!IsThisFreelancerGetAcceptToTheJob)
                        {
                            if (Model.isOffered)
                            {
                                <button type="submit" asp-page-handler="ForUpdate" style="margin-top:15px;width:80%;background-color:green;color:white;font-weight:bold;font-size:30px;border:none">Sửa Offer</button>
                            }
                            else
                            {
                                <button type="submit" asp-page-handler="ForAdd" style="margin-top:15px;width:80%;background-color:#FF9900;color:white;font-weight:bold;font-size:30px;border:none">Gửi Offer</button>
                            }
                        }
                    </div>
                    <div class="col-md-8">
                        <div>
                            <label for="selfIntroduction" style="font-weight:bold;font-size:20px;display:block">Tự giới thiệu<span style="color:red">*</span></label>
                            <textarea rows="7" style="width:100%" name="selfIntroduction" placeholder="Là một kỹ sư phần mềm tập trung vào ...&#10;Tôi cống hiến hết mình cho ..." required @AddReadonlyIfThisFreelancerGetAcceptedToTheJob>@e</textarea>
                        </div>
                        <div>
                            <label for="estimatedPlan" style="font-weight:bold;font-size:20px;display:block">Kế hoạch dự kiến<span style="color:red">*</span></label>
                            <textarea rows="7" style="width:100%" name="estimatedPlan" placeholder="1, chúng ta sẽ tập trung vào ... bằng cách tạo ra một ...&#10;Sau đó, sử dụng ... để tạo ra một ...&#10;Thực hiện kiểm tra để đảm bảo ..." required @AddReadonlyIfThisFreelancerGetAcceptedToTheJob>@f</textarea>
                        </div>


                    </div>
                </div>
            </form>
        }
        else if (item.Status == (int)JobStatusEnum.Hired)
        {
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <p style="text-align:center">Đang có một Freelancer làm công việc này</p>
                </div>
                <div class="col-md-2"></div>
            </div>
        }
        else if (item.Status == (int)JobStatusEnum.Completed || item.Status == (int)JobStatusEnum.Failed)
        {
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <p style="text-align:center">Công việc này đã kết thúc</p>
                </div>
                <div class="col-md-2"></div>
            </div>
        }
        else if (item.Status == (int)JobStatusEnum.NotApprove)
        {
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <p style="text-align:center">Công việc này chưa được đăng</p>
                </div>
                <div class="col-md-2"></div>
            </div>
        }


        @if (Model.offers.Count != 0)
        {
            <p style="width:100%;text-align:center;color:#4A86E8;font-size:30px;margin-top:20px">Offers:</p>
        }

        <div style="padding:10px">
            @foreach (var a in Model.offers)
            {
                <div class="row" style="box-shadow: 0px 0px 4px 4px #DCDCDC;border-radius:5px;margin-bottom:30px;padding:8px 0px 8px 0px">
                    <div class="col-md-3">
                        <table>
                            <tr>
                                <td rowspan="2">
                                    @{
                                        if (a.FreelancerImageBytes != null && a.FreelancerImageBytes.Length > 0)
                                        {
                                            var base64Image = Convert.ToBase64String(a.FreelancerImageBytes);
                                            var imgSrc = $"data:image/png;base64,{base64Image}";
                                            <img id="profileImage_@a.OfferID" src="@imgSrc" style="width:80%;height:auto;display:block" />
                                        }
                                        else
                                        {
                                            <img id="profileImage" src="/imgExample/default.png" style="width:80%;height:auto;display:block" />
                                        }
                                    }
                                </td>
                                <td>
                                    <a asp-page="../Freelancer/Profile/ViewProfileOtherFreelancer" asp-route-UserId="@a.FreelancerID" class="link" style="display:block">@a.FreelancerName</a>
                                </td>
                            </tr>
                            <tr><td><div id="feedbackFreeLancer@(a.FreelancerID)"><p>@a.FreelancerStarMedium⭐ (x đánh giá)</p></div></td></tr>
                        </table>
                        <div>
                            @if (a.Skills.Count > 3)
                            {
                                for (int i = 0; i < 3; i++)
                                {
                                    <div class="skill">@a.Skills.ElementAt(i)</div>
                                }
                                <div name="hidden_fake_skill_@a.OfferID" class="skillFake" onclick="DisplayAllSkill('@a.OfferID')">. . .</div>
                                for (int i = 3; i < a.Skills.Count; i++)
                                {
                                    <div name="hidden_skill_@a.OfferID" class="skill" style="display: none;">@a.Skills.ElementAt(i)</div>
                                }
                            }
                            else
                            {
                                foreach (string skill in a.Skills)
                                {
                                    <div class="skill">@skill</div>
                                }
                            }
                        </div>
                        <p>Số công việc đã làm: @a.NumberOfJobDone</p>
                    </div>
                    <div class="col-md-9" style="border-left:2px solid #BEBEBE">
                        <p>@a.DateOffer.ToString("dd/MM/yyyy")</p>
                        <p><span style="font-weight:normal;">Trả giá:   </span><span style="font-size:20px">@(((int)a.ProposedCost).ToString("#,##")) ₫</span></p>
                        <p><span style="font-weight:normal;">Số ngày dự kiến:   </span> <span style="font-size:20px">@a.ExpectedDays ngày</span></p>
                        @*<p style="white-space:pre-line"><span style="font-weight:bold">Tự giới thiệu:</span><br> @a.SelfIntroduction</p>
                    <p style="white-space:pre-line"><span style="font-weight:bold">Kế hoạch dự tính:</span><br> @a.EstimatedPlan</p>*@
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-md-1"></div>
</div>
<script>
    document.getElementById("proposedCost").addEventListener('change', function () {
        // Get the input element
        var input = document.getElementById("proposedCost");
        var input1 = input.value.replace(/[^0-9]/g, "");

        // Get the value and convert it to a number
        var value = parseFloat(input1);
        // Check if the value is a valid number
        if (!isNaN(value)) {
            // Format the number with dots for thousands separator
            var formattedValue = value.toLocaleString('en', { maximumFractionDigits: 0 }) + " ₫";

            // Update the input field with the formatted value
            input.value = formattedValue;
        }
    }, false);
</script>
<script>
    function DisplayAllCategory(JobID) {
        document.getElementsByName('hidden_fake_category_' + JobID)[0].style.display = "none";
        var hiddenCategory = document.getElementsByName('hidden_category_' + JobID);
        hiddenCategory.forEach(function (hiddenCategory) {
            hiddenCategory.style.display = "inline-block";
        })

    }
    function DisplayAllSkill(OfferID) {
        document.getElementsByName('hidden_fake_skill_' + OfferID)[0].style.display = "none";
        var hiddenSkill = document.getElementsByName('hidden_skill_' + OfferID);
        hiddenSkill.forEach(function (hiddenSkill) {
            hiddenSkill.style.display = "inline-block";
        })
    }
    window.onload = function () {
        // Get the input element
        var input = document.getElementById("proposedCost");
        var input1 = input.value.replace(/[^0-9]/g, "");

        // Get the value and convert it to a number
        var value = parseFloat(input1);
        // Check if the value is a valid number
        if (!isNaN(value)) {
            // Format the number with dots for thousands separator
            var formattedValue = value.toLocaleString('en', { maximumFractionDigits: 0 }) + " ₫";

            // Update the input field with the formatted value
            input.value = formattedValue;
        }
    };
</script>
<script>

    function startCountdown(targetDate, countdownId) {
        var countdownInterval = setInterval(function () {
            var now = new Date();
            var timeDifference = targetDate - now;
            var days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
            var hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
            document.getElementById(countdownId).innerHTML = "(" + days + "d " + hours + "h " + minutes + ":" + (seconds < 10 ? "0" : "") + seconds + ")";
            if (timeDifference < 0) {
                clearInterval(countdownInterval);
                document.getElementById(countdownId).innerHTML = "Hiring Expried";
            }
        }, 1000);
    }
    @if (Model.job.Status == (int)JobStatusEnum.Hiring && Model.job.EndHiringDate > DateTime.Now)
    {
        <text>
               var x = new Date("@Model.job.EndHiringDate.ToString("yyyy-MM-ddTHH:mm:ss")");
                startCountdown(x, "countdown_" + @Model.job.JobId);
        </text>
    }

</script>
<script>
    // Function to fetch and display feedback information
    function displayFeedbackInfo() {
        var employerId = @item.EmployerId; // Assuming EmployerId is an integer
        fetch(`@(UrlConstant.ApiBaseUrl)/Feedback/AverageStars/${employerId}`, {method: "GET",
            headers: {
            "ngrok-skip-browser-warning": true,
            "Authorization": "Bearer " + "@(HttpContextAccessor.HttpContext.Session.GetString("token"))",
        }})
            .then(response => response.json())
            .then(data => {
                document.getElementById('feedbackInfo').innerHTML = `
                                <p> ${data.averageStars}⭐(${data.numberOfEntries} Lượt đánh giá)</p>
                    `;
            })
            .catch(error => {
                console.error('Error fetching feedback information:', error);
            });
    }

    // Call the function to display feedback information when the page loads
    displayFeedbackInfo();
</script>
<script>
    // Function to fetch and display feedback information for the freelancer
    function displayFeedbackFreelancer(freelancerID) {
        fetch(`@(UrlConstant.ApiBaseUrl)/Feedback/AverageStars/${freelancerID}`, {
            method: "GET", headers: {
                    "ngrok-skip-browser-warning": true,
                    "Authorization": "Bearer " + "@(HttpContextAccessor.HttpContext.Session.GetString("token"))",
                }})
            .then(response => response.json())
            .then(data => {
                var feedbackFreelancerDiv = document.getElementById('feedbackFreeLancer'+freelancerID);
                feedbackFreelancerDiv.innerHTML = `
                        <p>${data.averageStars}⭐ (${data.numberOfEntries} đánh giá)</p>
                    `;
            })
            .catch(error => {
                console.error('Error fetching feedback information:', error);
            });
    }
    
</script>
@foreach (var a in Model.offers)
{
    <script>
        // Call the function to display feedback information for the freelancer when the page loads
        displayFeedbackFreelancer(@a.FreelancerID);
    </script>
    
}