@page
@using OpusLink.Entity.DTO.JobDTO;
@using OpusLink.Entity.Models;
@using OpusLink.Shared.Enums;
@model OpusLink.User.Hosted.Pages.JOB.EmployerUpdateJobPageModel
@{
    var itemMain = Model.Job;
}
@{
    ViewData["Title"] = "Employer Update A Job";
}
<style>
    .Label {
        font-weight: bold;
        margin: 20px 0px 5px 0px;
    }

    .ACategory {
        display: inline-block;
        background-color: #CFE2F3;
        border: 1px solid grey;
        margin: 9px 9px 0px 0px;
        padding-left: 5px;
    }
    /* The Close Button */
    .close {
        color: red;
        float: right;
        font-size: 28px;
        font-weight: bold;
        height: 30px;
        line-height: 22px;
        vertical-align: middle;
        padding: 0px 5px 0px 5px
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>
<div class="row" style="margin:10px 0px 10px 0px">
    <div class="col-md-1"></div>
    <div class="col-md-10">
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <form method="post" onsubmit="return validateBudgetFromAndTo()">
                    <input type="number" hidden name="jobId" value="@itemMain.JobId" />
                    <input type="number" hidden name="status" value="@itemMain.Status" />
                    <input type="number" hidden name="freelancerId" value="@itemMain.FreelancerId" />
                    <input type="text" hidden name="dateCreated" value="@itemMain.DateCreated.ToString()" />
                    <p class="Label">Đặt tiêu đề cho job</p>
                    <input type="text" name="title" value="@itemMain.JobTitle" placeholder="Job Title" style="width:100% " required />
                    <p class="Label">Chọn những danh mục cần tuyển dụng</p>
                    <select style="width:350px;height:30px" onchange="ClickACategory()" id="categoryDropdown">
                        <option value="" disabled selected>Chọn danh mục</option>
                        @foreach (var item in Model.AllCategories)
                        {
                            <option value="@item.CategoryID" onclick="ClickACategory(@item.CategoryID ,@item.CategoryName)">@item.CategoryName</option>
                        }
                    </select>
                    <div id="CategoryContainer" style="min-height:30px">
                        @foreach (var item in Model.Job.Categories)
                        {
                            <div class="ACategory" id="ACategory_@item.CategoryID">
                                @item.CategoryName
                                <span class="close" onclick="Delete(@item.CategoryID)">&times;</span>
                                <input type="text" name="category_@item.CategoryID" value="@item.CategoryID" hidden />
                            </div>
                        }
                    </div>
                    <p class="Label">Mô tả cho job</p>
                    @*white-space: pre-line*@
                    <textarea name="content" style="width:100%;height:auto" rows="15" required>@itemMain.JobContent</textarea>
                    <p class="Label">Ngân sách cho job</p>
                    <div class="row">
                        <div class="col-md-1">Từ</div>
                        <div class="col-md-5">
                            <select name="budget_min" id="budgetFrom">
                                @for (int i = 1; i < 200; i++)
                                {
                                    if (i == (int)(itemMain.BudgetMin / 500000))
                                    {
                                        <option value="@itemMain.BudgetMin" selected>@((itemMain.BudgetMin).ToString("#,##0")) đ</option>
                                    }
                                    else
                                    {
                                        <option value="@(i*500000)">@((i * 500000).ToString("#,##0")) đ</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-1">Đến</div>
                        <div class="col-md-5">
                            <select name="budget_max" id="budgetTo">
                                @for (int i = 1; i < 200; i++)
                                {
                                    if (i == (int)(itemMain.BudgetMax / 500000))
                                    {
                                        <option value="@itemMain.BudgetMax" selected>@((itemMain.BudgetMax).ToString("#,##0")) đ</option>
                                    }
                                    else
                                    {
                                        <option value="@(i*500000)">@((i * 500000).ToString("#,##0")) đ</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div>
                        <span id="errorMessage" style="color:red"></span>
                    </div>
                    <p class="Label">Địa điểm</p>
                    <select name="location">
                        @foreach (var loca in Model.AllLocations)
                        {
                            if (loca.LocationId == itemMain.LocationId)
                            {
                                <option value="@loca.LocationId" selected>@loca.LocationName</option>
                            }
                            else
                            {
                                <option value="@loca.LocationId">@loca.LocationName</option>
                            }
                        }
                    </select>
                    <div style="text-align:center;margin-top:15px">
                        @if (itemMain.Status == (int)JobStatusEnum.NotApprove)
                        {
                            <button type="submit" style="background-color:#3C78D8;color:white;font-size:20px">Đã xong</button>
                        }
                        else
                        {
                            <p>Phí gửi lại yêu cầu đăng job là 50.000 đồng.</p>
                            <button type="submit" style="background-color:#3C78D8;color:white;font-size:20px">Gửi lại yêu cầu đăng job</button>
                        }
                    </div>
                </form>
            </div>
            <div class="col-md-3"></div>
        </div>
    </div>
    <div class="col-md-1"></div>
</div>
<script>
    function ClickACategory() {

        var selectElement = document.getElementById("categoryDropdown");
        var selectedCategoryId = selectElement.value;
        var selectedCategoryName = selectElement.options[selectElement.selectedIndex].text;
        var CategoryContainer = document.getElementById("CategoryContainer");
        var str = "<div class=\"ACategory\" id=\"ACategory_" + selectedCategoryId + "\">" + selectedCategoryName + "<span class=\"close\" onclick=\"Delete(" + selectedCategoryId + ")\">&times;</span><input type=\"text\" name=\"category_" + selectedCategoryId + "\" value=\"" + selectedCategoryId + "\" hidden/></div>"
        CategoryContainer.innerHTML += str;
    }
    function Delete(CategoryID) {
        var CategoryDiv = document.getElementById("ACategory_" + CategoryID).remove();
    }
</script>
<script>
    function validateBudgetFromAndTo() {

        var fromBudget = document.getElementById("budgetFrom").value.replace(/\D/g, '');
        var toBudget = document.getElementById("budgetTo").value.replace(/\D/g, '');
        var fromBudgetInput = document.getElementById("budgetFrom");
        var toBudgetInput = document.getElementById("budgetTo");
        var errorMessage = document.getElementById("errorMessage");

        // Remove existing error messages
        fromBudgetInput.classList.remove("error");
        toBudgetInput.classList.remove("error");
        errorMessage.innerHTML = "";

        //// Check if both fields are filled
        //if (fromBudget === "" || toBudget === "") {
        //    if (fromBudget === "") fromBudgetInput.classList.add("error");
        //    if (toBudget === "") toBudgetInput.classList.add("error");
        //    errorMessage.innerHTML = "Please select both From Budget and To Budget.";
        //    return false;
        //}

        // Check if fromBudget is less than or equal to toBudget
        if (parseInt(fromBudget) >= parseInt(toBudget)) {
            fromBudgetInput.classList.add("error");
            toBudgetInput.classList.add("error");
            errorMessage.innerHTML = "Ngân sách từ A đến B, A nhỏ hơn B.";
            return false;
        }

        // If everything is fine, allow the form to be submitted


    if (@itemMain.Status == @((int)JobStatusEnum.NotApprove))
    {

    }
    else
    {
        var totalMoney = document.getElementById("amountforms").innerHTML;
        var fee = 50000;
        var errorMessage = document.getElementById("errorMessage");

        // Remove existing error messages
        errorMessage.innerHTML = "";

        if (parseInt(totalMoney) < parseInt(fee))
        {
            errorMessage.innerHTML = "Bạn không đủ tiền để gửi yêu cầu sửa bài.";
            return false;
        }
    }

            return true;
    }
</script>
















